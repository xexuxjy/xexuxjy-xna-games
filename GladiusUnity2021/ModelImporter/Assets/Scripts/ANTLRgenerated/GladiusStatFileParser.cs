//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusStatFile.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusStatFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, WS=2, INT=3, FLOAT=4, COMMA=5, UNDERSCORE=6, DASH=7, STRING=8, 
		SINGLELINE_COMMENT=9;
	public const int
		RULE_root = 0, RULE_modCoreStatsComp = 1;
	public static readonly string[] ruleNames = {
		"root", "modCoreStatsComp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'MODCORESTATSCOMP:'", null, null, null, "','", "'_'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "WS", "INT", "FLOAT", "COMMA", "UNDERSCORE", "DASH", "STRING", 
		"SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusStatFile.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusStatFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusStatFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusStatFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModCoreStatsCompContext[] modCoreStatsComp() {
			return GetRuleContexts<ModCoreStatsCompContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModCoreStatsCompContext modCoreStatsComp(int i) {
			return GetRuleContext<ModCoreStatsCompContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusStatFileListener typedListener = listener as IGladiusStatFileListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusStatFileListener typedListener = listener as IGladiusStatFileListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusStatFileVisitor<TResult> typedVisitor = visitor as IGladiusStatFileVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4;
				modCoreStatsComp();
				}
				}
				State = 7;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModCoreStatsCompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusStatFileParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusStatFileParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusStatFileParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusStatFileParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GladiusStatFileParser.FLOAT, 0); }
		public ModCoreStatsCompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modCoreStatsComp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusStatFileListener typedListener = listener as IGladiusStatFileListener;
			if (typedListener != null) typedListener.EnterModCoreStatsComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusStatFileListener typedListener = listener as IGladiusStatFileListener;
			if (typedListener != null) typedListener.ExitModCoreStatsComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusStatFileVisitor<TResult> typedVisitor = visitor as IGladiusStatFileVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModCoreStatsComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModCoreStatsCompContext modCoreStatsComp() {
		ModCoreStatsCompContext _localctx = new ModCoreStatsCompContext(Context, State);
		EnterRule(_localctx, 2, RULE_modCoreStatsComp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			Match(T__0);
			State = 10;
			Match(STRING);
			State = 11;
			Match(COMMA);
			State = 12;
			Match(INT);
			State = 13;
			Match(INT);
			State = 14;
			Match(INT);
			State = 15;
			Match(INT);
			State = 16;
			Match(INT);
			State = 17;
			Match(INT);
			State = 18;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x17', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x6', '\x2', '\b', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\t', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x2', '\x2', '\x4', '\x2', 
		'\x4', '\x2', '\x3', '\x3', '\x2', '\x5', '\x6', '\x2', '\x15', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x4', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\b', '\x5', '\x4', '\x3', '\x2', '\a', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\t', '\x3', '\x2', '\x2', '\x2', '\t', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\n', '\x3', '\x2', '\x2', '\x2', '\n', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\f', '\a', '\x3', '\x2', '\x2', '\f', '\r', 
		'\a', '\n', '\x2', '\x2', '\r', '\xE', '\a', '\a', '\x2', '\x2', '\xE', 
		'\xF', '\a', '\x5', '\x2', '\x2', '\xF', '\x10', '\a', '\x5', '\x2', '\x2', 
		'\x10', '\x11', '\a', '\x5', '\x2', '\x2', '\x11', '\x12', '\a', '\x5', 
		'\x2', '\x2', '\x12', '\x13', '\a', '\x5', '\x2', '\x2', '\x13', '\x14', 
		'\a', '\x5', '\x2', '\x2', '\x14', '\x15', '\t', '\x2', '\x2', '\x2', 
		'\x15', '\x5', '\x3', '\x2', '\x2', '\x2', '\x3', '\t',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
