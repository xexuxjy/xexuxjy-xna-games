//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusItem.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusItemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		WS=18, INT=19, FLOAT=20, COMMA=21, UNDERSCORE=22, DASH=23, STRING=24, 
		SINGLELINE_COMMENT=25;
	public const int
		RULE_root = 0, RULE_numEntries = 1, RULE_item = 2, RULE_itemCreate = 3, 
		RULE_itemDescriptionId = 4, RULE_itemDisplayNameId = 5, RULE_itemCost = 6, 
		RULE_itemMinLevel = 7, RULE_itemRarity = 8, RULE_itemRegion = 9, RULE_itemHideSet = 10, 
		RULE_itemShowSet = 11, RULE_itemMesh = 12, RULE_itemMaterial = 13, RULE_itemSkill = 14, 
		RULE_itemAffinity = 15, RULE_itemStatMod = 16, RULE_itemAttribute = 17;
	public static readonly string[] ruleNames = {
		"root", "numEntries", "item", "itemCreate", "itemDescriptionId", "itemDisplayNameId", 
		"itemCost", "itemMinLevel", "itemRarity", "itemRegion", "itemHideSet", 
		"itemShowSet", "itemMesh", "itemMaterial", "itemSkill", "itemAffinity", 
		"itemStatMod", "itemAttribute"
	};

	private static readonly string[] _LiteralNames = {
		null, "'NUMENTRIES:'", "'ITEMCREATE:'", "'.ITEMDESCRIPTIONID:'", "'.ITEMDISPLAYNAMEID:'", 
		"'.ITEMCOST:'", "'.ITEMMINLEVEL:'", "'.ITEMRARITY:'", "'.ITEMREGION:'", 
		"'.ITEMHIDESET:'", "'.ITEMSHOWSET:'", "'.ITEMMESH:'", "'.ITEMMESH2:'", 
		"'.ITEMMATERIAL:'", "'.ITEMSKILL:'", "'.ITEMAFFINITY:'", "'.ITEMSTATMOD:'", 
		"'.ITEMATTRIBUTE:'", null, null, null, "','", "'_'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "WS", "INT", "FLOAT", "COMMA", "UNDERSCORE", 
		"DASH", "STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusItem.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusItemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusItemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusItemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumEntriesContext numEntries() {
			return GetRuleContext<NumEntriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			numEntries();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 37;
				item();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumEntriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public NumEntriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numEntries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterNumEntries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitNumEntries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumEntries(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumEntriesContext numEntries() {
		NumEntriesContext _localctx = new NumEntriesContext(Context, State);
		EnterRule(_localctx, 2, RULE_numEntries);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(T__0);
			State = 43;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemCreateContext itemCreate() {
			return GetRuleContext<ItemCreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemCostContext itemCost() {
			return GetRuleContext<ItemCostContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemMinLevelContext itemMinLevel() {
			return GetRuleContext<ItemMinLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemRarityContext itemRarity() {
			return GetRuleContext<ItemRarityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemDescriptionIdContext itemDescriptionId() {
			return GetRuleContext<ItemDescriptionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemDisplayNameIdContext itemDisplayNameId() {
			return GetRuleContext<ItemDisplayNameIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemAttributeContext[] itemAttribute() {
			return GetRuleContexts<ItemAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemAttributeContext itemAttribute(int i) {
			return GetRuleContext<ItemAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemRegionContext[] itemRegion() {
			return GetRuleContexts<ItemRegionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemRegionContext itemRegion(int i) {
			return GetRuleContext<ItemRegionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemMeshContext[] itemMesh() {
			return GetRuleContexts<ItemMeshContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemMeshContext itemMesh(int i) {
			return GetRuleContext<ItemMeshContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemMaterialContext itemMaterial() {
			return GetRuleContext<ItemMaterialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemHideSetContext[] itemHideSet() {
			return GetRuleContexts<ItemHideSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemHideSetContext itemHideSet(int i) {
			return GetRuleContext<ItemHideSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemShowSetContext[] itemShowSet() {
			return GetRuleContexts<ItemShowSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemShowSetContext itemShowSet(int i) {
			return GetRuleContext<ItemShowSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemAffinityContext itemAffinity() {
			return GetRuleContext<ItemAffinityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemSkillContext[] itemSkill() {
			return GetRuleContexts<ItemSkillContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemSkillContext itemSkill(int i) {
			return GetRuleContext<ItemSkillContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemStatModContext[] itemStatMod() {
			return GetRuleContexts<ItemStatModContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemStatModContext itemStatMod(int i) {
			return GetRuleContext<ItemStatModContext>(i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 4, RULE_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			itemCreate();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 46;
				itemDescriptionId();
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 49;
				itemDisplayNameId();
				}
			}

			State = 52;
			itemCost();
			State = 53;
			itemMinLevel();
			State = 54;
			itemRarity();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 55;
				itemAttribute();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 61;
				itemRegion();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10 || _la==T__11) {
				{
				{
				State = 67;
				itemMesh();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 73;
				itemMaterial();
				}
			}

			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 76;
				itemHideSet();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 82;
				itemShowSet();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 88;
				itemAffinity();
				}
			}

			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 91;
				itemSkill();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 97;
				itemStatMod();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemCreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GladiusItemParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GladiusItemParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusItemParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusItemParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public ItemCreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemCreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemCreateContext itemCreate() {
		ItemCreateContext _localctx = new ItemCreateContext(Context, State);
		EnterRule(_localctx, 6, RULE_itemCreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__1);
			State = 104;
			Match(STRING);
			State = 105;
			Match(COMMA);
			State = 106;
			Match(STRING);
			State = 107;
			Match(COMMA);
			State = 108;
			Match(STRING);
			State = 109;
			Match(COMMA);
			State = 110;
			Match(STRING);
			State = 111;
			Match(COMMA);
			State = 112;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemDescriptionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public ItemDescriptionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemDescriptionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemDescriptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemDescriptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemDescriptionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemDescriptionIdContext itemDescriptionId() {
		ItemDescriptionIdContext _localctx = new ItemDescriptionIdContext(Context, State);
		EnterRule(_localctx, 8, RULE_itemDescriptionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__2);
			State = 115;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemDisplayNameIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public ItemDisplayNameIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemDisplayNameId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemDisplayNameId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemDisplayNameId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemDisplayNameId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemDisplayNameIdContext itemDisplayNameId() {
		ItemDisplayNameIdContext _localctx = new ItemDisplayNameIdContext(Context, State);
		EnterRule(_localctx, 10, RULE_itemDisplayNameId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__3);
			State = 118;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemCostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public ItemCostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemCost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemCost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemCost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemCost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemCostContext itemCost() {
		ItemCostContext _localctx = new ItemCostContext(Context, State);
		EnterRule(_localctx, 12, RULE_itemCost);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__4);
			State = 121;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemMinLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public ItemMinLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemMinLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemMinLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemMinLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemMinLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemMinLevelContext itemMinLevel() {
		ItemMinLevelContext _localctx = new ItemMinLevelContext(Context, State);
		EnterRule(_localctx, 14, RULE_itemMinLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__5);
			State = 124;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemRarityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemRarityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemRarity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemRarity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemRarity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemRarity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemRarityContext itemRarity() {
		ItemRarityContext _localctx = new ItemRarityContext(Context, State);
		EnterRule(_localctx, 16, RULE_itemRarity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(T__6);
			State = 127;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemRegionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemRegionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemRegion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemRegion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemRegion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemRegion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemRegionContext itemRegion() {
		ItemRegionContext _localctx = new ItemRegionContext(Context, State);
		EnterRule(_localctx, 18, RULE_itemRegion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(T__7);
			State = 130;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemHideSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemHideSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemHideSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemHideSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemHideSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemHideSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemHideSetContext itemHideSet() {
		ItemHideSetContext _localctx = new ItemHideSetContext(Context, State);
		EnterRule(_localctx, 20, RULE_itemHideSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__8);
			State = 133;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemShowSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemShowSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemShowSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemShowSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemShowSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemShowSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemShowSetContext itemShowSet() {
		ItemShowSetContext _localctx = new ItemShowSetContext(Context, State);
		EnterRule(_localctx, 22, RULE_itemShowSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(T__9);
			State = 136;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemMeshContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemMeshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemMesh; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemMesh(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemMesh(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemMesh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemMeshContext itemMesh() {
		ItemMeshContext _localctx = new ItemMeshContext(Context, State);
		EnterRule(_localctx, 24, RULE_itemMesh);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 139;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemMaterialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemMaterialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemMaterial; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemMaterial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemMaterialContext itemMaterial() {
		ItemMaterialContext _localctx = new ItemMaterialContext(Context, State);
		EnterRule(_localctx, 26, RULE_itemMaterial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__12);
			State = 142;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemSkillContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemSkillContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemSkill; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemSkill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemSkill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemSkill(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemSkillContext itemSkill() {
		ItemSkillContext _localctx = new ItemSkillContext(Context, State);
		EnterRule(_localctx, 28, RULE_itemSkill);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__13);
			State = 145;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemAffinityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusItemParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public ItemAffinityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemAffinity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemAffinity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemAffinity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemAffinity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemAffinityContext itemAffinity() {
		ItemAffinityContext _localctx = new ItemAffinityContext(Context, State);
		EnterRule(_localctx, 30, RULE_itemAffinity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(T__14);
			State = 148;
			Match(STRING);
			State = 149;
			Match(COMMA);
			State = 150;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemStatModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusItemParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusItemParser.INT, 0); }
		public ItemStatModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemStatMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemStatMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemStatMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemStatMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemStatModContext itemStatMod() {
		ItemStatModContext _localctx = new ItemStatModContext(Context, State);
		EnterRule(_localctx, 32, RULE_itemStatMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(T__15);
			State = 153;
			Match(STRING);
			State = 154;
			Match(COMMA);
			State = 155;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemParser.STRING, 0); }
		public ItemAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.EnterItemAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemListener typedListener = listener as IGladiusItemListener;
			if (typedListener != null) typedListener.ExitItemAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemVisitor<TResult> typedVisitor = visitor as IGladiusItemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemAttributeContext itemAttribute() {
		ItemAttributeContext _localctx = new ItemAttributeContext(Context, State);
		EnterRule(_localctx, 34, RULE_itemAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__16);
			State = 158;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', '\xA3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', ')', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '*', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', ';', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '>', '\v', '\x4', '\x3', '\x4', '\a', '\x4', '\x41', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x44', '\v', '\x4', '\x3', '\x4', '\a', '\x4', 
		'G', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'J', '\v', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'M', '\n', '\x4', '\x3', '\x4', '\a', '\x4', 'P', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', 'S', '\v', '\x4', '\x3', '\x4', 
		'\a', '\x4', 'V', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'Y', '\v', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\\', '\n', '\x4', '\x3', '\x4', '\a', '\x4', 
		'_', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x62', '\v', '\x4', '\x3', 
		'\x4', '\a', '\x4', '\x65', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'h', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '\x2', '\x3', '\x3', '\x2', '\r', '\xE', '\x2', 
		'\x9C', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '/', '\x3', '\x2', '\x2', '\x2', '\b', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\n', 't', '\x3', '\x2', '\x2', '\x2', '\f', 'w', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'z', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x12', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x83', '\x3', '\x2', '\x2', '\x2', '\x16', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x89', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x92', '\x3', '\x2', '\x2', '\x2', ' ', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x9A', '\x3', '\x2', '\x2', '\x2', '$', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', '\x4', '\x3', '\x2', '\'', 
		')', '\x5', '\x6', '\x4', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\x3', '\x2', '\x2', '\x2', '+', '\x3', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\a', '\x3', '\x2', '\x2', '-', '.', '\a', '\x15', '\x2', 
		'\x2', '.', '\x5', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x5', '\b', 
		'\x5', '\x2', '\x30', '\x32', '\x5', '\n', '\x6', '\x2', '\x31', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\x5', '\f', 
		'\a', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x5', '\xE', '\b', '\x2', '\x37', '\x38', '\x5', '\x10', 
		'\t', '\x2', '\x38', '<', '\x5', '\x12', '\n', '\x2', '\x39', ';', '\x5', 
		'$', '\x13', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '>', 
		'\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\x3', '\x2', '\x2', '\x2', '=', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\x5', '\x14', '\v', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', 'H', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x5', '\x1A', '\xE', 
		'\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'M', '\x5', '\x1C', '\xF', '\x2', 'L', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', '\x16', '\f', '\x2', 
		'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'W', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'T', 'V', '\x5', '\x18', '\r', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x5', ' ', '\x11', '\x2', 
		'[', 'Z', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', '`', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x5', '\x1E', 
		'\x10', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x5', '\"', 
		'\x12', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x4', 
		'\x2', '\x2', 'j', 'k', '\a', '\x1A', '\x2', '\x2', 'k', 'l', '\a', '\x17', 
		'\x2', '\x2', 'l', 'm', '\a', '\x1A', '\x2', '\x2', 'm', 'n', '\a', '\x17', 
		'\x2', '\x2', 'n', 'o', '\a', '\x1A', '\x2', '\x2', 'o', 'p', '\a', '\x17', 
		'\x2', '\x2', 'p', 'q', '\a', '\x1A', '\x2', '\x2', 'q', 'r', '\a', '\x17', 
		'\x2', '\x2', 'r', 's', '\a', '\x15', '\x2', '\x2', 's', '\t', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\a', '\x5', '\x2', '\x2', 'u', 'v', '\a', 
		'\x15', '\x2', '\x2', 'v', '\v', '\x3', '\x2', '\x2', '\x2', 'w', 'x', 
		'\a', '\x6', '\x2', '\x2', 'x', 'y', '\a', '\x15', '\x2', '\x2', 'y', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\a', '\x2', '\x2', 
		'{', '|', '\a', '\x15', '\x2', '\x2', '|', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\a', '\b', '\x2', '\x2', '~', '\x7F', '\a', '\x15', 
		'\x2', '\x2', '\x7F', '\x11', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\a', '\t', '\x2', '\x2', '\x81', '\x82', '\a', '\x1A', '\x2', '\x2', 
		'\x82', '\x13', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\n', 
		'\x2', '\x2', '\x84', '\x85', '\a', '\x1A', '\x2', '\x2', '\x85', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\v', '\x2', '\x2', 
		'\x87', '\x88', '\a', '\x1A', '\x2', '\x2', '\x88', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\a', '\f', '\x2', '\x2', '\x8A', '\x8B', 
		'\a', '\x1A', '\x2', '\x2', '\x8B', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\t', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x1A', 
		'\x2', '\x2', '\x8E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\a', '\xF', '\x2', '\x2', '\x90', '\x91', '\a', '\x1A', '\x2', '\x2', 
		'\x91', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x10', 
		'\x2', '\x2', '\x93', '\x94', '\a', '\x1A', '\x2', '\x2', '\x94', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\x11', '\x2', '\x2', 
		'\x96', '\x97', '\a', '\x1A', '\x2', '\x2', '\x97', '\x98', '\a', '\x17', 
		'\x2', '\x2', '\x98', '\x99', '\a', '\x15', '\x2', '\x2', '\x99', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\x12', '\x2', '\x2', 
		'\x9B', '\x9C', '\a', '\x1A', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x17', 
		'\x2', '\x2', '\x9D', '\x9E', '\a', '\x15', '\x2', '\x2', '\x9E', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x13', '\x2', '\x2', 
		'\xA0', '\xA1', '\a', '\x1A', '\x2', '\x2', '\xA1', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '*', '\x31', '\x34', '<', '\x42', 'H', 'L', 'Q', 
		'W', '[', '`', '\x66',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
