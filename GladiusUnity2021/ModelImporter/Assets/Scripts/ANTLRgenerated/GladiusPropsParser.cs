//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusProps.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusPropsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		WS=18, INT=19, FLOAT=20, COMMA=21, UNDERSCORE=22, DASH=23, QUOTEDSTRING=24, 
		SINGLELINE_COMMENT=25;
	public const int
		RULE_root = 0, RULE_version = 1, RULE_prop = 2, RULE_propname = 3, RULE_models = 4, 
		RULE_lighting = 5, RULE_shadow = 6, RULE_scriptname = 7, RULE_heights = 8, 
		RULE_heightsoffset = 9, RULE_pos = 10, RULE_rot = 11, RULE_attributescount = 12, 
		RULE_attribute = 13, RULE_propend = 14, RULE_onoff = 15, RULE_endfile = 16;
	public static readonly string[] ruleNames = {
		"root", "version", "prop", "propname", "models", "lighting", "shadow", 
		"scriptname", "heights", "heightsoffset", "pos", "rot", "attributescount", 
		"attribute", "propend", "onoff", "endfile"
	};

	private static readonly string[] _LiteralNames = {
		null, "'VERSION:'", "'PROP:'", "'MODELS:'", "'No'", "'LIGHTING:'", "'SHADOW:'", 
		"'SCRIPTNAME:'", "'HEIGHTS:'", "'HEIGHTOFFSET:'", "'POS:'", "'ROT:'", 
		"'ATTRIBUTES:'", "'ATTRIBUTE:'", "'PROP_END'", "'ON'", "'OFF'", "'ENDFILE'", 
		null, null, null, "','", "'_'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "WS", "INT", "FLOAT", "COMMA", "UNDERSCORE", 
		"DASH", "QUOTEDSTRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusProps.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusPropsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusPropsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusPropsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndfileContext endfile() {
			return GetRuleContext<EndfileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			version();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 35;
				prop();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			State = 40;
			endfile();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusPropsParser.INT, 0); }
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 2, RULE_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(T__0);
			State = 43;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropnameContext propname() {
			return GetRuleContext<PropnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelsContext models() {
			return GetRuleContext<ModelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LightingContext lighting() {
			return GetRuleContext<LightingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShadowContext shadow() {
			return GetRuleContext<ShadowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeightsContext heights() {
			return GetRuleContext<HeightsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PosContext pos() {
			return GetRuleContext<PosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RotContext rot() {
			return GetRuleContext<RotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributescountContext attributescount() {
			return GetRuleContext<AttributescountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropendContext propend() {
			return GetRuleContext<PropendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptnameContext scriptname() {
			return GetRuleContext<ScriptnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeightsoffsetContext heightsoffset() {
			return GetRuleContext<HeightsoffsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterProp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitProp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 4, RULE_prop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			propname();
			State = 46;
			models();
			State = 47;
			lighting();
			State = 48;
			shadow();
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 49;
				scriptname();
				}
			}

			State = 52;
			heights();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 53;
				heightsoffset();
				}
			}

			State = 56;
			pos();
			State = 57;
			rot();
			State = 58;
			attributescount();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 59;
				attribute();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			propend();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTEDSTRING() { return GetToken(GladiusPropsParser.QUOTEDSTRING, 0); }
		public PropnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterPropname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitPropname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropnameContext propname() {
		PropnameContext _localctx = new PropnameContext(Context, State);
		EnterRule(_localctx, 6, RULE_propname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__1);
			State = 68;
			Match(QUOTEDSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTEDSTRING() { return GetToken(GladiusPropsParser.QUOTEDSTRING, 0); }
		public ModelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_models; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterModels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitModels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelsContext models() {
		ModelsContext _localctx = new ModelsContext(Context, State);
		EnterRule(_localctx, 8, RULE_models);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(T__2);
			State = 71;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==QUOTEDSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LightingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnoffContext onoff() {
			return GetRuleContext<OnoffContext>(0);
		}
		public LightingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lighting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterLighting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitLighting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLighting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LightingContext lighting() {
		LightingContext _localctx = new LightingContext(Context, State);
		EnterRule(_localctx, 10, RULE_lighting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__4);
			State = 74;
			onoff();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShadowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnoffContext onoff() {
			return GetRuleContext<OnoffContext>(0);
		}
		public ShadowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shadow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterShadow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitShadow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShadow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShadowContext shadow() {
		ShadowContext _localctx = new ShadowContext(Context, State);
		EnterRule(_localctx, 12, RULE_shadow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__5);
			State = 77;
			onoff();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTEDSTRING() { return GetToken(GladiusPropsParser.QUOTEDSTRING, 0); }
		public ScriptnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterScriptname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitScriptname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptnameContext scriptname() {
		ScriptnameContext _localctx = new ScriptnameContext(Context, State);
		EnterRule(_localctx, 14, RULE_scriptname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(T__6);
			State = 80;
			Match(QUOTEDSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeightsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GladiusPropsParser.FLOAT, 0); }
		public HeightsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heights; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterHeights(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitHeights(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeights(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeightsContext heights() {
		HeightsContext _localctx = new HeightsContext(Context, State);
		EnterRule(_localctx, 16, RULE_heights);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__7);
			State = 83;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeightsoffsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GladiusPropsParser.FLOAT, 0); }
		public HeightsoffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heightsoffset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterHeightsoffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitHeightsoffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeightsoffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeightsoffsetContext heightsoffset() {
		HeightsoffsetContext _localctx = new HeightsoffsetContext(Context, State);
		EnterRule(_localctx, 18, RULE_heightsoffset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__8);
			State = 86;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(GladiusPropsParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(GladiusPropsParser.FLOAT, i);
		}
		public PosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterPos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitPos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PosContext pos() {
		PosContext _localctx = new PosContext(Context, State);
		EnterRule(_localctx, 20, RULE_pos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__9);
			State = 89;
			Match(FLOAT);
			State = 90;
			Match(FLOAT);
			State = 91;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(GladiusPropsParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(GladiusPropsParser.FLOAT, i);
		}
		public RotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterRot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitRot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotContext rot() {
		RotContext _localctx = new RotContext(Context, State);
		EnterRule(_localctx, 22, RULE_rot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__10);
			State = 94;
			Match(FLOAT);
			State = 95;
			Match(FLOAT);
			State = 96;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributescountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusPropsParser.INT, 0); }
		public AttributescountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributescount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterAttributescount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitAttributescount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributescount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributescountContext attributescount() {
		AttributescountContext _localctx = new AttributescountContext(Context, State);
		EnterRule(_localctx, 24, RULE_attributescount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__11);
			State = 99;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTEDSTRING() { return GetToken(GladiusPropsParser.QUOTEDSTRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 26, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__12);
			State = 102;
			Match(QUOTEDSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropendContext : ParserRuleContext {
		public PropendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propend; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterPropend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitPropend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropendContext propend() {
		PropendContext _localctx = new PropendContext(Context, State);
		EnterRule(_localctx, 28, RULE_propend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnoffContext : ParserRuleContext {
		public OnoffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onoff; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterOnoff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitOnoff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnoff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnoffContext onoff() {
		OnoffContext _localctx = new OnoffContext(Context, State);
		EnterRule(_localctx, 30, RULE_onoff);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !(_la==T__14 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndfileContext : ParserRuleContext {
		public EndfileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endfile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.EnterEndfile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusPropsListener typedListener = listener as IGladiusPropsListener;
			if (typedListener != null) typedListener.ExitEndfile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusPropsVisitor<TResult> typedVisitor = visitor as IGladiusPropsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndfile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndfileContext endfile() {
		EndfileContext _localctx = new EndfileContext(Context, State);
		EnterRule(_localctx, 32, RULE_endfile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', 'q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\'', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '(', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x39', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '?', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x42', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', 
		'\x4', '\x4', '\x2', '\x6', '\x6', '\x1A', '\x1A', '\x3', '\x2', '\x11', 
		'\x12', '\x2', '\x63', '\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', 
		',', '\x3', '\x2', '\x2', '\x2', '\x6', '/', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'K', '\x3', '\x2', '\x2', '\x2', '\xE', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'Q', '\x3', '\x2', '\x2', '\x2', '\x12', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'W', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x18', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x64', '\x3', '\x2', '\x2', '\x2', '\x1C', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', 'j', '\x3', '\x2', '\x2', '\x2', ' ', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\"', 'n', '\x3', '\x2', '\x2', '\x2', '$', '&', 
		'\x5', '\x4', '\x3', '\x2', '%', '\'', '\x5', '\x6', '\x4', '\x2', '&', 
		'%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', 
		'(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', '\"', '\x12', '\x2', 
		'+', '\x3', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x3', '\x2', 
		'\x2', '-', '.', '\a', '\x15', '\x2', '\x2', '.', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x5', '\b', '\x5', '\x2', '\x30', '\x31', 
		'\x5', '\n', '\x6', '\x2', '\x31', '\x32', '\x5', '\f', '\a', '\x2', '\x32', 
		'\x34', '\x5', '\xE', '\b', '\x2', '\x33', '\x35', '\x5', '\x10', '\t', 
		'\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x5', '\x12', '\n', '\x2', '\x37', '\x39', '\x5', '\x14', '\v', 
		'\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x5', '\x16', '\f', '\x2', ';', '<', '\x5', '\x18', '\r', '\x2', '<', 
		'@', '\x5', '\x1A', '\xE', '\x2', '=', '?', '\x5', '\x1C', '\xF', '\x2', 
		'>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\x1E', '\x10', '\x2', 
		'\x44', '\a', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x4', 
		'\x2', '\x2', '\x46', 'G', '\a', '\x1A', '\x2', '\x2', 'G', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\a', '\x5', '\x2', '\x2', 'I', 'J', '\t', 
		'\x2', '\x2', '\x2', 'J', '\v', '\x3', '\x2', '\x2', '\x2', 'K', 'L', 
		'\a', '\a', '\x2', '\x2', 'L', 'M', '\x5', ' ', '\x11', '\x2', 'M', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\b', '\x2', '\x2', 'O', 'P', 
		'\x5', ' ', '\x11', '\x2', 'P', '\xF', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\a', '\t', '\x2', '\x2', 'R', 'S', '\a', '\x1A', '\x2', '\x2', 'S', 
		'\x11', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\n', '\x2', '\x2', 
		'U', 'V', '\a', '\x16', '\x2', '\x2', 'V', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\a', '\v', '\x2', '\x2', 'X', 'Y', '\a', '\x16', '\x2', 
		'\x2', 'Y', '\x15', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\f', 
		'\x2', '\x2', '[', '\\', '\a', '\x16', '\x2', '\x2', '\\', ']', '\a', 
		'\x16', '\x2', '\x2', ']', '^', '\a', '\x16', '\x2', '\x2', '^', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\r', '\x2', '\x2', '`', '\x61', 
		'\a', '\x16', '\x2', '\x2', '\x61', '\x62', '\a', '\x16', '\x2', '\x2', 
		'\x62', '\x63', '\a', '\x16', '\x2', '\x2', '\x63', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\a', '\xE', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x15', '\x2', '\x2', '\x66', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\a', '\xF', '\x2', '\x2', 'h', 'i', '\a', '\x1A', '\x2', '\x2', 
		'i', '\x1D', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x10', '\x2', 
		'\x2', 'k', '\x1F', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\t', '\x3', 
		'\x2', '\x2', 'm', '!', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x13', 
		'\x2', '\x2', 'o', '#', '\x3', '\x2', '\x2', '\x2', '\x6', '(', '\x34', 
		'\x38', '@',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
