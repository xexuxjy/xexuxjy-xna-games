//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusClassDef.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusClassDefParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, WS=24, INT=25, 
		FLOAT=26, COMMA=27, UNDERSCORE=28, DASH=29, LTHAN=30, GTHAN=31, PERIOD=32, 
		STRING=33, SINGLELINE_COMMENT=34;
	public const int
		RULE_root = 0, RULE_createClass = 1, RULE_displayName = 2, RULE_descriptionId = 3, 
		RULE_unitSet = 4, RULE_skillUse = 5, RULE_voiceLinePrefix = 6, RULE_soundTable = 7, 
		RULE_mesh = 8, RULE_classIcon = 9, RULE_headIcon = 10, RULE_gridSize = 11, 
		RULE_xpAward = 12, RULE_itemSizes = 13, RULE_itemSubSize = 14, RULE_attribute = 15, 
		RULE_itemCat = 16, RULE_levelUpXpNeeded = 17, RULE_levelUpJPGiven = 18, 
		RULE_levelStatAwards = 19, RULE_levelZeroStats = 20, RULE_affinity = 21, 
		RULE_rockScissorsPaper = 22, RULE_fx = 23, RULE_derivationClass = 24, 
		RULE_compileUnit = 25;
	public static readonly string[] ruleNames = {
		"root", "createClass", "displayName", "descriptionId", "unitSet", "skillUse", 
		"voiceLinePrefix", "soundTable", "mesh", "classIcon", "headIcon", "gridSize", 
		"xpAward", "itemSizes", "itemSubSize", "attribute", "itemCat", "levelUpXpNeeded", 
		"levelUpJPGiven", "levelStatAwards", "levelZeroStats", "affinity", "rockScissorsPaper", 
		"fx", "derivationClass", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'CREATECLASS:'", "'DISPLAYNAMEID:'", "'DESCRIPTIONID:'", "'UNITSETNAME:'", 
		"'SKILLUSENAME:'", "'VOICELINEPREFIX:'", "'SOUNDTABLENAME:'", "'MESH:'", 
		"'CLASSICON:'", "'HEADICON:'", "'GRIDSIZE:'", "'XPAWARD:'", "'ITEMSIZES:'", 
		"'ATTRIBUTE:'", "'ITEMCAT:'", "'LEVELUPXPNEEDED:'", "'LEVELUPJPGIVEN:'", 
		"'LEVELSTATAWARDS:'", "'LEVELZEROSTATS:'", "'AFFINITY:'", "'ROCKSCISSORSPAPER:'", 
		"'FX:'", "'DERIVATIONCLASSNAME:'", null, null, null, "','", "'_'", "'-'", 
		"'<'", "'>'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"WS", "INT", "FLOAT", "COMMA", "UNDERSCORE", "DASH", "LTHAN", "GTHAN", 
		"PERIOD", "STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusClassDef.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusClassDefParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusClassDefParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusClassDefParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateClassContext[] createClass() {
			return GetRuleContexts<CreateClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateClassContext createClass(int i) {
			return GetRuleContext<CreateClassContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				createClass();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplayNameContext displayName() {
			return GetRuleContext<DisplayNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionIdContext descriptionId() {
			return GetRuleContext<DescriptionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitSetContext unitSet() {
			return GetRuleContext<UnitSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkillUseContext skillUse() {
			return GetRuleContext<SkillUseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoiceLinePrefixContext voiceLinePrefix() {
			return GetRuleContext<VoiceLinePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundTableContext soundTable() {
			return GetRuleContext<SoundTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeshContext mesh() {
			return GetRuleContext<MeshContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivationClassContext derivationClass() {
			return GetRuleContext<DerivationClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadIconContext headIcon() {
			return GetRuleContext<HeadIconContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIconContext classIcon() {
			return GetRuleContext<ClassIconContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GridSizeContext gridSize() {
			return GetRuleContext<GridSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XpAwardContext xpAward() {
			return GetRuleContext<XpAwardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemSizesContext itemSizes() {
			return GetRuleContext<ItemSizesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AffinityContext affinity() {
			return GetRuleContext<AffinityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RockScissorsPaperContext rockScissorsPaper() {
			return GetRuleContext<RockScissorsPaperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemCatContext[] itemCat() {
			return GetRuleContexts<ItemCatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemCatContext itemCat(int i) {
			return GetRuleContext<ItemCatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxContext[] fx() {
			return GetRuleContexts<FxContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxContext fx(int i) {
			return GetRuleContext<FxContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelUpXpNeededContext levelUpXpNeeded() {
			return GetRuleContext<LevelUpXpNeededContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelUpJPGivenContext levelUpJPGiven() {
			return GetRuleContext<LevelUpJPGivenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelStatAwardsContext[] levelStatAwards() {
			return GetRuleContexts<LevelStatAwardsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelStatAwardsContext levelStatAwards(int i) {
			return GetRuleContext<LevelStatAwardsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelZeroStatsContext levelZeroStats() {
			return GetRuleContext<LevelZeroStatsContext>(0);
		}
		public CreateClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterCreateClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitCreateClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateClassContext createClass() {
		CreateClassContext _localctx = new CreateClassContext(Context, State);
		EnterRule(_localctx, 2, RULE_createClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(T__0);
			State = 58;
			Match(STRING);
			State = 59;
			displayName();
			State = 60;
			descriptionId();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 61;
				unitSet();
				}
			}

			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 64;
				skillUse();
				}
			}

			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 67;
				voiceLinePrefix();
				}
			}

			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 70;
				soundTable();
				}
			}

			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 73;
				mesh();
				}
			}

			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 76;
				derivationClass();
				}
			}

			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 79;
				headIcon();
				}
			}

			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 82;
				classIcon();
				}
			}

			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 85;
				gridSize();
				}
			}

			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 88;
				xpAward();
				}
			}

			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 91;
				itemSizes();
				}
			}

			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 94;
				affinity();
				}
			}

			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 97;
				attribute();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 103;
				rockScissorsPaper();
				}
			}

			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 106;
				itemCat();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21) {
				{
				{
				State = 112;
				fx();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 118;
				levelUpXpNeeded();
				}
			}

			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 121;
				levelUpJPGiven();
				}
			}

			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 124;
				levelStatAwards();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 130;
				levelZeroStats();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusClassDefParser.INT, 0); }
		public DisplayNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterDisplayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitDisplayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayNameContext displayName() {
		DisplayNameContext _localctx = new DisplayNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_displayName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(T__1);
			State = 134;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusClassDefParser.INT, 0); }
		public DescriptionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterDescriptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitDescriptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionIdContext descriptionId() {
		DescriptionIdContext _localctx = new DescriptionIdContext(Context, State);
		EnterRule(_localctx, 6, RULE_descriptionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__2);
			State = 137;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public UnitSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterUnitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitUnitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitSetContext unitSet() {
		UnitSetContext _localctx = new UnitSetContext(Context, State);
		EnterRule(_localctx, 8, RULE_unitSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(T__3);
			State = 140;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public SkillUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterSkillUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitSkillUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillUseContext skillUse() {
		SkillUseContext _localctx = new SkillUseContext(Context, State);
		EnterRule(_localctx, 10, RULE_skillUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__4);
			State = 143;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoiceLinePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public VoiceLinePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voiceLinePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterVoiceLinePrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitVoiceLinePrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoiceLinePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoiceLinePrefixContext voiceLinePrefix() {
		VoiceLinePrefixContext _localctx = new VoiceLinePrefixContext(Context, State);
		EnterRule(_localctx, 12, RULE_voiceLinePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(T__5);
			State = 146;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public SoundTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterSoundTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitSoundTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundTableContext soundTable() {
		SoundTableContext _localctx = new SoundTableContext(Context, State);
		EnterRule(_localctx, 14, RULE_soundTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(T__6);
			State = 149;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeshContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public MeshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mesh; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterMesh(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitMesh(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMesh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeshContext mesh() {
		MeshContext _localctx = new MeshContext(Context, State);
		EnterRule(_localctx, 16, RULE_mesh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(T__7);
			State = 152;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassIconContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public ClassIconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classIcon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterClassIcon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitClassIcon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassIcon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassIconContext classIcon() {
		ClassIconContext _localctx = new ClassIconContext(Context, State);
		EnterRule(_localctx, 18, RULE_classIcon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(T__8);
			State = 155;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadIconContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public HeadIconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headIcon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterHeadIcon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitHeadIcon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadIcon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadIconContext headIcon() {
		HeadIconContext _localctx = new HeadIconContext(Context, State);
		EnterRule(_localctx, 20, RULE_headIcon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__9);
			State = 158;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusClassDefParser.INT, 0); }
		public GridSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterGridSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitGridSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridSizeContext gridSize() {
		GridSizeContext _localctx = new GridSizeContext(Context, State);
		EnterRule(_localctx, 22, RULE_gridSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(T__10);
			State = 161;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XpAwardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusClassDefParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusClassDefParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusClassDefParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GladiusClassDefParser.FLOAT, 0); }
		public XpAwardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xpAward; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterXpAward(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitXpAward(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXpAward(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XpAwardContext xpAward() {
		XpAwardContext _localctx = new XpAwardContext(Context, State);
		EnterRule(_localctx, 24, RULE_xpAward);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(T__11);
			State = 164;
			Match(INT);
			State = 165;
			Match(COMMA);
			State = 166;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemSizesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemSubSizeContext[] itemSubSize() {
			return GetRuleContexts<ItemSubSizeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemSubSizeContext itemSubSize(int i) {
			return GetRuleContext<ItemSubSizeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusClassDefParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusClassDefParser.COMMA, i);
		}
		public ItemSizesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemSizes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterItemSizes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitItemSizes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemSizes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemSizesContext itemSizes() {
		ItemSizesContext _localctx = new ItemSizesContext(Context, State);
		EnterRule(_localctx, 26, RULE_itemSizes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__12);
			State = 169;
			itemSubSize();
			State = 170;
			Match(COMMA);
			State = 171;
			itemSubSize();
			State = 172;
			Match(COMMA);
			State = 173;
			itemSubSize();
			State = 174;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemSubSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GladiusClassDefParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusClassDefParser.INT, 0); }
		public ItemSubSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemSubSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterItemSubSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitItemSubSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemSubSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemSubSizeContext itemSubSize() {
		ItemSubSizeContext _localctx = new ItemSubSizeContext(Context, State);
		EnterRule(_localctx, 28, RULE_itemSubSize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__13);
			State = 179;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemCatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GladiusClassDefParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GladiusClassDefParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusClassDefParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusClassDefParser.COMMA, i);
		}
		public ItemCatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemCat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterItemCat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitItemCat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemCat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemCatContext itemCat() {
		ItemCatContext _localctx = new ItemCatContext(Context, State);
		EnterRule(_localctx, 32, RULE_itemCat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__14);
			State = 182;
			Match(STRING);
			State = 183;
			Match(COMMA);
			State = 184;
			Match(STRING);
			State = 185;
			Match(COMMA);
			State = 186;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelUpXpNeededContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusClassDefParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusClassDefParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusClassDefParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusClassDefParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GladiusClassDefParser.FLOAT, 0); }
		public LevelUpXpNeededContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelUpXpNeeded; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterLevelUpXpNeeded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitLevelUpXpNeeded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelUpXpNeeded(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelUpXpNeededContext levelUpXpNeeded() {
		LevelUpXpNeededContext _localctx = new LevelUpXpNeededContext(Context, State);
		EnterRule(_localctx, 34, RULE_levelUpXpNeeded);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__15);
			State = 189;
			Match(INT);
			State = 190;
			Match(COMMA);
			State = 191;
			Match(INT);
			State = 192;
			Match(COMMA);
			State = 193;
			Match(INT);
			State = 194;
			Match(COMMA);
			State = 195;
			Match(INT);
			State = 196;
			Match(COMMA);
			State = 197;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelUpJPGivenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusClassDefParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusClassDefParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusClassDefParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusClassDefParser.COMMA, i);
		}
		public LevelUpJPGivenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelUpJPGiven; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterLevelUpJPGiven(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitLevelUpJPGiven(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelUpJPGiven(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelUpJPGivenContext levelUpJPGiven() {
		LevelUpJPGivenContext _localctx = new LevelUpJPGivenContext(Context, State);
		EnterRule(_localctx, 36, RULE_levelUpJPGiven);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(T__16);
			State = 200;
			Match(INT);
			State = 201;
			Match(COMMA);
			State = 202;
			Match(INT);
			State = 203;
			Match(COMMA);
			State = 204;
			Match(INT);
			State = 205;
			Match(COMMA);
			State = 206;
			Match(INT);
			State = 207;
			Match(COMMA);
			State = 208;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelStatAwardsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusClassDefParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusClassDefParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusClassDefParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusClassDefParser.COMMA, i);
		}
		public LevelStatAwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelStatAwards; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterLevelStatAwards(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitLevelStatAwards(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelStatAwards(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelStatAwardsContext levelStatAwards() {
		LevelStatAwardsContext _localctx = new LevelStatAwardsContext(Context, State);
		EnterRule(_localctx, 38, RULE_levelStatAwards);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__17);
			State = 211;
			Match(INT);
			State = 212;
			Match(COMMA);
			State = 213;
			Match(INT);
			State = 214;
			Match(COMMA);
			State = 215;
			Match(INT);
			State = 216;
			Match(COMMA);
			State = 217;
			Match(INT);
			State = 218;
			Match(COMMA);
			State = 219;
			Match(INT);
			State = 220;
			Match(COMMA);
			State = 221;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelZeroStatsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusClassDefParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusClassDefParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusClassDefParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusClassDefParser.COMMA, i);
		}
		public LevelZeroStatsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelZeroStats; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterLevelZeroStats(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitLevelZeroStats(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelZeroStats(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelZeroStatsContext levelZeroStats() {
		LevelZeroStatsContext _localctx = new LevelZeroStatsContext(Context, State);
		EnterRule(_localctx, 40, RULE_levelZeroStats);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(T__18);
			State = 224;
			Match(INT);
			State = 225;
			Match(COMMA);
			State = 226;
			Match(INT);
			State = 227;
			Match(COMMA);
			State = 228;
			Match(INT);
			State = 229;
			Match(COMMA);
			State = 230;
			Match(INT);
			State = 231;
			Match(COMMA);
			State = 232;
			Match(INT);
			State = 233;
			Match(COMMA);
			State = 234;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AffinityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public AffinityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_affinity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterAffinity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitAffinity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAffinity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AffinityContext affinity() {
		AffinityContext _localctx = new AffinityContext(Context, State);
		EnterRule(_localctx, 42, RULE_affinity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(T__19);
			State = 237;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RockScissorsPaperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public RockScissorsPaperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rockScissorsPaper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterRockScissorsPaper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitRockScissorsPaper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRockScissorsPaper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RockScissorsPaperContext rockScissorsPaper() {
		RockScissorsPaperContext _localctx = new RockScissorsPaperContext(Context, State);
		EnterRule(_localctx, 44, RULE_rockScissorsPaper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(T__20);
			State = 240;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GladiusClassDefParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GladiusClassDefParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusClassDefParser.COMMA, 0); }
		public FxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fx; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterFx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitFx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxContext fx() {
		FxContext _localctx = new FxContext(Context, State);
		EnterRule(_localctx, 46, RULE_fx);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(T__21);
			State = 243;
			Match(STRING);
			State = 244;
			Match(COMMA);
			State = 245;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivationClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusClassDefParser.STRING, 0); }
		public DerivationClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivationClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterDerivationClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitDerivationClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivationClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivationClassContext derivationClass() {
		DerivationClassContext _localctx = new DerivationClassContext(Context, State);
		EnterRule(_localctx, 48, RULE_derivationClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(T__22);
			State = 248;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GladiusClassDefParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusClassDefListener typedListener = listener as IGladiusClassDefListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusClassDefVisitor<TResult> typedVisitor = visitor as IGladiusClassDefVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 50, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '$', '\xFF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x6', '\x2', '\x38', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x39', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x41', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'G', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'J', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'M', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'P', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'S', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'V', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'Y', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\\', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '_', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x62', '\n', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x65', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', 'h', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', 'k', '\n', '\x3', 
		'\x3', '\x3', '\a', '\x3', 'n', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'q', '\v', '\x3', '\x3', '\x3', '\a', '\x3', 't', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', 'w', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', 'z', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '}', '\n', '\x3', '\x3', '\x3', '\a', 
		'\x3', '\x80', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x83', '\v', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x86', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x2', '\x2', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', 
		'\x3', '\x3', '\x2', '\x1B', '\x1C', '\x2', '\xF9', '\x2', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x4', ';', '\x3', '\x2', '\x2', '\x2', '\x6', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x8D', '\x3', '\x2', '\x2', '\x2', '\f', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x93', '\x3', '\x2', '\x2', '\x2', '\x10', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xB2', '\x3', '\x2', '\x2', '\x2', ' ', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xB7', '\x3', '\x2', '\x2', '\x2', '$', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xC9', '\x3', '\x2', '\x2', '\x2', '(', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xE1', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '.', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x32', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x5', '\x4', '\x3', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\x3', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\x3', '\x2', '\x2', '<', 
		'=', '\a', '#', '\x2', '\x2', '=', '>', '\x5', '\x6', '\x4', '\x2', '>', 
		'@', '\x5', '\b', '\x5', '\x2', '?', '\x41', '\x5', '\n', '\x6', '\x2', 
		'@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x5', 
		'\f', '\a', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'G', '\x5', '\xE', '\b', '\x2', '\x46', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'J', '\x5', '\x10', '\t', '\x2', 'I', 
		'H', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\x5', '\x12', '\n', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', '\x32', '\x1A', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x5', '\x16', 
		'\f', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x5', '\x14', 
		'\v', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x5', '\x18', 
		'\r', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x5', 
		'\x1A', '\xE', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', 
		'_', '\x5', '\x1C', '\xF', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', 
		'^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x62', '\x5', ',', '\x17', '\x2', '\x61', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x5', ' ', '\x11', '\x2', 
		'\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x5', '.', '\x18', '\x2', 
		'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'o', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', '\"', '\x12', '\x2', 
		'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', 'u', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\x5', '\x30', '\x19', '\x2', 's', 'r', '\x3', '\x2', '\x2', 
		'\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\x5', '$', '\x13', 
		'\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\x3', '\x2', '\x2', '\x2', '{', '}', '\x5', '&', '\x14', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x81', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x5', '(', 
		'\x15', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', 
		'\x5', '*', '\x16', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\a', '\x4', '\x2', '\x2', '\x88', '\x89', 
		'\a', '\x1B', '\x2', '\x2', '\x89', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8B', '\a', '\x5', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x1B', 
		'\x2', '\x2', '\x8C', '\t', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\a', '\x6', '\x2', '\x2', '\x8E', '\x8F', '\a', '#', '\x2', '\x2', '\x8F', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\a', '\x2', '\x2', 
		'\x91', '\x92', '\a', '#', '\x2', '\x2', '\x92', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\a', '\b', '\x2', '\x2', '\x94', '\x95', '\a', 
		'#', '\x2', '\x2', '\x95', '\xF', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\a', '\t', '\x2', '\x2', '\x97', '\x98', '\a', '#', '\x2', '\x2', 
		'\x98', '\x11', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\n', 
		'\x2', '\x2', '\x9A', '\x9B', '\a', '#', '\x2', '\x2', '\x9B', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\v', '\x2', '\x2', 
		'\x9D', '\x9E', '\a', '#', '\x2', '\x2', '\x9E', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\a', '\f', '\x2', '\x2', '\xA0', '\xA1', 
		'\a', '#', '\x2', '\x2', '\xA1', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', '\r', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x1B', '\x2', 
		'\x2', '\xA4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'\xE', '\x2', '\x2', '\xA6', '\xA7', '\a', '\x1B', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x1D', '\x2', '\x2', '\xA8', '\xA9', '\t', '\x2', '\x2', 
		'\x2', '\xA9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		'\xF', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x1E', '\x10', '\x2', '\xAC', 
		'\xAD', '\a', '\x1D', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x1E', '\x10', 
		'\x2', '\xAE', '\xAF', '\a', '\x1D', '\x2', '\x2', '\xAF', '\xB0', '\x5', 
		'\x1E', '\x10', '\x2', '\xB0', '\xB1', '\a', '\x1D', '\x2', '\x2', '\xB1', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\t', '\x2', '\x2', 
		'\x2', '\xB3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'\x10', '\x2', '\x2', '\xB5', '\xB6', '\a', '#', '\x2', '\x2', '\xB6', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x11', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '#', '\x2', '\x2', '\xB9', '\xBA', '\a', 
		'\x1D', '\x2', '\x2', '\xBA', '\xBB', '\a', '#', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\x1D', '\x2', '\x2', '\xBC', '\xBD', '\a', '#', '\x2', 
		'\x2', '\xBD', '#', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', 
		'\x12', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x1B', '\x2', '\x2', '\xC0', 
		'\xC1', '\a', '\x1D', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x1B', '\x2', 
		'\x2', '\xC2', '\xC3', '\a', '\x1D', '\x2', '\x2', '\xC3', '\xC4', '\a', 
		'\x1B', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1D', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\x1B', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x1D', '\x2', 
		'\x2', '\xC7', '\xC8', '\t', '\x2', '\x2', '\x2', '\xC8', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x13', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '\x1B', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1D', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', '\x1B', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'\x1D', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x1B', '\x2', '\x2', '\xCF', 
		'\xD0', '\a', '\x1D', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x1B', '\x2', 
		'\x2', '\xD1', '\xD2', '\a', '\x1D', '\x2', '\x2', '\xD2', '\xD3', '\a', 
		'\x1B', '\x2', '\x2', '\xD3', '\'', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\x14', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x1B', '\x2', 
		'\x2', '\xD6', '\xD7', '\a', '\x1D', '\x2', '\x2', '\xD7', '\xD8', '\a', 
		'\x1B', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x1D', '\x2', '\x2', '\xD9', 
		'\xDA', '\a', '\x1B', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x1D', '\x2', 
		'\x2', '\xDB', '\xDC', '\a', '\x1B', '\x2', '\x2', '\xDC', '\xDD', '\a', 
		'\x1D', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x1B', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\x1D', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x1B', '\x2', 
		'\x2', '\xE0', ')', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		'\x15', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x1B', '\x2', '\x2', '\xE3', 
		'\xE4', '\a', '\x1D', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x1B', '\x2', 
		'\x2', '\xE5', '\xE6', '\a', '\x1D', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'\x1B', '\x2', '\x2', '\xE7', '\xE8', '\a', '\x1D', '\x2', '\x2', '\xE8', 
		'\xE9', '\a', '\x1B', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x1D', '\x2', 
		'\x2', '\xEA', '\xEB', '\a', '\x1B', '\x2', '\x2', '\xEB', '\xEC', '\a', 
		'\x1D', '\x2', '\x2', '\xEC', '\xED', '\a', '\x1B', '\x2', '\x2', '\xED', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x16', '\x2', 
		'\x2', '\xEF', '\xF0', '\a', '#', '\x2', '\x2', '\xF0', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '\xF2', '\a', '\x17', '\x2', '\x2', '\xF2', '\xF3', 
		'\a', '#', '\x2', '\x2', '\xF3', '/', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF5', '\a', '\x18', '\x2', '\x2', '\xF5', '\xF6', '\a', '#', '\x2', 
		'\x2', '\xF6', '\xF7', '\a', '\x1D', '\x2', '\x2', '\xF7', '\xF8', '\a', 
		'#', '\x2', '\x2', '\xF8', '\x31', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\a', '\x19', '\x2', '\x2', '\xFA', '\xFB', '\a', '#', '\x2', 
		'\x2', '\xFB', '\x33', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', 
		'\x2', '\x2', '\x3', '\xFD', '\x35', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x39', '@', '\x43', '\x46', 'I', 'L', 'O', 'R', 'U', 'X', '[', '^', '\x61', 
		'\x66', 'j', 'o', 'u', 'y', '|', '\x81', '\x85',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
