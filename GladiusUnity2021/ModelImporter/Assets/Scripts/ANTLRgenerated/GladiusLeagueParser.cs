//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusLeague.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusLeagueParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, WS=36, INT=37, FLOAT=38, OBR=39, 
		CBR=40, COMMA=41, UNDERSCORE=42, DASH=43, PERIOD=44, FWDSLASH=45, STRING=46, 
		SINGLELINE_COMMENT=47;
	public const int
		RULE_root = 0, RULE_officeName = 1, RULE_officeDesc = 2, RULE_tagLine1 = 3, 
		RULE_tagLine2 = 4, RULE_leaguePtsNeeded = 5, RULE_officer = 6, RULE_recruit = 7, 
		RULE_school = 8, RULE_league = 9, RULE_leagueDesc = 10, RULE_leaguePts = 11, 
		RULE_encptsNeeded = 12, RULE_onHover = 13, RULE_onSelect = 14, RULE_onWin = 15, 
		RULE_designNotes = 16, RULE_minPop = 17, RULE_minLevel = 18, RULE_maxLevel = 19, 
		RULE_hero = 20, RULE_tier = 21, RULE_badge = 22, RULE_prizeCompletion = 23, 
		RULE_prizeMastery = 24, RULE_leagueImage = 25, RULE_encounter = 26, RULE_encDesc = 27, 
		RULE_encFile = 28, RULE_encpts = 29, RULE_teams = 30, RULE_frequency = 31, 
		RULE_type = 32, RULE_entryFee = 33, RULE_prizeTier = 34;
	public static readonly string[] ruleNames = {
		"root", "officeName", "officeDesc", "tagLine1", "tagLine2", "leaguePtsNeeded", 
		"officer", "recruit", "school", "league", "leagueDesc", "leaguePts", "encptsNeeded", 
		"onHover", "onSelect", "onWin", "designNotes", "minPop", "minLevel", "maxLevel", 
		"hero", "tier", "badge", "prizeCompletion", "prizeMastery", "leagueImage", 
		"encounter", "encDesc", "encFile", "encpts", "teams", "frequency", "type", 
		"entryFee", "prizeTier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'INDOORS'", "'OFFICENAME'", "'OFFICEDESC'", "'TAGLINE1'", "'TAGLINE2'", 
		"'LEAGUEPTSNEEDED'", "'OFFICER'", "'RECRUIT'", "'SCHOOL'", "'LEAGUE'", 
		"'LEAGUEDESC'", "'LEAGUEPTS'", "'ENCPTSNEEDED'", "'ONHOVER'", "'ONSELECT'", 
		"'ONWIN'", "'DESIGNNOTES'", "'MINPOP'", "'MINLEVEL'", "'MAXLEVEL'", "'HERO'", 
		"'TIER'", "'BADGE'", "'PRIZECOMPLETION'", "'PRIZEMASTERY'", "'LEAGUEIMAGE'", 
		"'ENCOUNTER'", "'ENCDESC'", "'ENCFILE'", "'ENCPTS'", "'TEAMS'", "'FREQUENCY'", 
		"'TYPE'", "'ENTRYFEE'", "'PRIZETIER'", null, null, null, "'{'", "'}'", 
		"','", "'_'", "'-'", "'.'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"WS", "INT", "FLOAT", "OBR", "CBR", "COMMA", "UNDERSCORE", "DASH", "PERIOD", 
		"FWDSLASH", "STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusLeague.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusLeagueParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusLeagueParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusLeagueParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OfficeNameContext officeName() {
			return GetRuleContext<OfficeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OfficeDescContext officeDesc() {
			return GetRuleContext<OfficeDescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagLine1Context tagLine1() {
			return GetRuleContext<TagLine1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagLine2Context tagLine2() {
			return GetRuleContext<TagLine2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaguePtsNeededContext leaguePtsNeeded() {
			return GetRuleContext<LeaguePtsNeededContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OfficerContext officer() {
			return GetRuleContext<OfficerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecruitContext[] recruit() {
			return GetRuleContexts<RecruitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecruitContext recruit(int i) {
			return GetRuleContext<RecruitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchoolContext[] school() {
			return GetRuleContexts<SchoolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchoolContext school(int i) {
			return GetRuleContext<SchoolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeagueContext[] league() {
			return GetRuleContexts<LeagueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeagueContext league(int i) {
			return GetRuleContext<LeagueContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			officeName();
			State = 71;
			officeDesc();
			State = 72;
			tagLine1();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 73;
				Match(T__0);
				}
			}

			State = 76;
			tagLine2();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 77;
				leaguePtsNeeded();
				}
			}

			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 80;
				officer();
				}
			}

			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 83;
				recruit();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 89;
				school();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 95;
				league();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__9 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OfficeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusLeagueParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public OfficeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_officeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterOfficeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitOfficeName(this);
		}
	}

	[RuleVersion(0)]
	public OfficeNameContext officeName() {
		OfficeNameContext _localctx = new OfficeNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_officeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__1);
			State = 101;
			Match(STRING);
			State = 102;
			Match(COMMA);
			State = 103;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OfficeDescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public OfficeDescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_officeDesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterOfficeDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitOfficeDesc(this);
		}
	}

	[RuleVersion(0)]
	public OfficeDescContext officeDesc() {
		OfficeDescContext _localctx = new OfficeDescContext(Context, State);
		EnterRule(_localctx, 4, RULE_officeDesc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__2);
			State = 106;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagLine1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public TagLine1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagLine1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterTagLine1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitTagLine1(this);
		}
	}

	[RuleVersion(0)]
	public TagLine1Context tagLine1() {
		TagLine1Context _localctx = new TagLine1Context(Context, State);
		EnterRule(_localctx, 6, RULE_tagLine1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__3);
			State = 109;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagLine2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public TagLine2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagLine2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterTagLine2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitTagLine2(this);
		}
	}

	[RuleVersion(0)]
	public TagLine2Context tagLine2() {
		TagLine2Context _localctx = new TagLine2Context(Context, State);
		EnterRule(_localctx, 8, RULE_tagLine2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__4);
			State = 112;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaguePtsNeededContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public LeaguePtsNeededContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaguePtsNeeded; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterLeaguePtsNeeded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitLeaguePtsNeeded(this);
		}
	}

	[RuleVersion(0)]
	public LeaguePtsNeededContext leaguePtsNeeded() {
		LeaguePtsNeededContext _localctx = new LeaguePtsNeededContext(Context, State);
		EnterRule(_localctx, 10, RULE_leaguePtsNeeded);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__5);
			State = 115;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OfficerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		public OfficerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_officer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterOfficer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitOfficer(this);
		}
	}

	[RuleVersion(0)]
	public OfficerContext officer() {
		OfficerContext _localctx = new OfficerContext(Context, State);
		EnterRule(_localctx, 12, RULE_officer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__6);
			State = 118;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecruitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusLeagueParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusLeagueParser.INT, i);
		}
		public RecruitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recruit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterRecruit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitRecruit(this);
		}
	}

	[RuleVersion(0)]
	public RecruitContext recruit() {
		RecruitContext _localctx = new RecruitContext(Context, State);
		EnterRule(_localctx, 14, RULE_recruit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__7);
			State = 121;
			Match(STRING);
			State = 122;
			Match(INT);
			State = 123;
			Match(INT);
			State = 124;
			Match(INT);
			State = 125;
			Match(INT);
			State = 126;
			Match(INT);
			State = 127;
			Match(INT);
			State = 128;
			Match(INT);
			State = 129;
			Match(INT);
			State = 130;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public SchoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_school; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterSchool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitSchool(this);
		}
	}

	[RuleVersion(0)]
	public SchoolContext school() {
		SchoolContext _localctx = new SchoolContext(Context, State);
		EnterRule(_localctx, 16, RULE_school);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__8);
			State = 133;
			Match(STRING);
			State = 134;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeagueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusLeagueParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeagueDescContext leagueDesc() {
			return GetRuleContext<LeagueDescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaguePtsContext leaguePts() {
			return GetRuleContext<LeaguePtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncptsNeededContext encptsNeeded() {
			return GetRuleContext<EncptsNeededContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnHoverContext onHover() {
			return GetRuleContext<OnHoverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSelectContext onSelect() {
			return GetRuleContext<OnSelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnWinContext onWin() {
			return GetRuleContext<OnWinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignNotesContext designNotes() {
			return GetRuleContext<DesignNotesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeagueImageContext leagueImage() {
			return GetRuleContext<LeagueImageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinPopContext minPop() {
			return GetRuleContext<MinPopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TierContext tier() {
			return GetRuleContext<TierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BadgeContext[] badge() {
			return GetRuleContexts<BadgeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BadgeContext badge(int i) {
			return GetRuleContext<BadgeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeroContext hero() {
			return GetRuleContext<HeroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeCompletionContext[] prizeCompletion() {
			return GetRuleContexts<PrizeCompletionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeCompletionContext prizeCompletion(int i) {
			return GetRuleContext<PrizeCompletionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeMasteryContext[] prizeMastery() {
			return GetRuleContexts<PrizeMasteryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeMasteryContext prizeMastery(int i) {
			return GetRuleContext<PrizeMasteryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncounterContext[] encounter() {
			return GetRuleContexts<EncounterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncounterContext encounter(int i) {
			return GetRuleContext<EncounterContext>(i);
		}
		public LeagueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_league; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterLeague(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitLeague(this);
		}
	}

	[RuleVersion(0)]
	public LeagueContext league() {
		LeagueContext _localctx = new LeagueContext(Context, State);
		EnterRule(_localctx, 18, RULE_league);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__9);
			State = 137;
			Match(STRING);
			State = 138;
			Match(COMMA);
			State = 139;
			Match(INT);
			State = 140;
			leagueDesc();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 141;
				designNotes();
				}
			}

			State = 144;
			leaguePts();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 145;
				leagueImage();
				}
			}

			State = 148;
			encptsNeeded();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 149;
				minPop();
				}
			}

			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 152;
				tier();
				}
			}

			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 155;
				badge();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 161;
			onHover();
			State = 162;
			onSelect();
			State = 163;
			onWin();
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 164;
				hero();
				}
			}

			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 167;
				prizeCompletion();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__24) {
				{
				{
				State = 173;
				prizeMastery();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 179;
				encounter();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeagueDescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public LeagueDescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leagueDesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterLeagueDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitLeagueDesc(this);
		}
	}

	[RuleVersion(0)]
	public LeagueDescContext leagueDesc() {
		LeagueDescContext _localctx = new LeagueDescContext(Context, State);
		EnterRule(_localctx, 20, RULE_leagueDesc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(T__10);
			State = 186;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaguePtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public LeaguePtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaguePts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterLeaguePts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitLeaguePts(this);
		}
	}

	[RuleVersion(0)]
	public LeaguePtsContext leaguePts() {
		LeaguePtsContext _localctx = new LeaguePtsContext(Context, State);
		EnterRule(_localctx, 22, RULE_leaguePts);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__11);
			State = 189;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncptsNeededContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public EncptsNeededContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encptsNeeded; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterEncptsNeeded(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitEncptsNeeded(this);
		}
	}

	[RuleVersion(0)]
	public EncptsNeededContext encptsNeeded() {
		EncptsNeededContext _localctx = new EncptsNeededContext(Context, State);
		EnterRule(_localctx, 24, RULE_encptsNeeded);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__12);
			State = 192;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnHoverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusLeagueParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusLeagueParser.INT, i);
		}
		public OnHoverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onHover; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterOnHover(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitOnHover(this);
		}
	}

	[RuleVersion(0)]
	public OnHoverContext onHover() {
		OnHoverContext _localctx = new OnHoverContext(Context, State);
		EnterRule(_localctx, 26, RULE_onHover);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__13);
			State = 195;
			Match(INT);
			State = 196;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusLeagueParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusLeagueParser.INT, i);
		}
		public OnSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterOnSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitOnSelect(this);
		}
	}

	[RuleVersion(0)]
	public OnSelectContext onSelect() {
		OnSelectContext _localctx = new OnSelectContext(Context, State);
		EnterRule(_localctx, 28, RULE_onSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(T__14);
			State = 199;
			Match(INT);
			State = 200;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnWinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public OnWinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onWin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterOnWin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitOnWin(this);
		}
	}

	[RuleVersion(0)]
	public OnWinContext onWin() {
		OnWinContext _localctx = new OnWinContext(Context, State);
		EnterRule(_localctx, 30, RULE_onWin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(T__15);
			State = 203;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignNotesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		public DesignNotesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designNotes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterDesignNotes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitDesignNotes(this);
		}
	}

	[RuleVersion(0)]
	public DesignNotesContext designNotes() {
		DesignNotesContext _localctx = new DesignNotesContext(Context, State);
		EnterRule(_localctx, 32, RULE_designNotes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(T__16);
			State = 206;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinPopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public MinPopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minPop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterMinPop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitMinPop(this);
		}
	}

	[RuleVersion(0)]
	public MinPopContext minPop() {
		MinPopContext _localctx = new MinPopContext(Context, State);
		EnterRule(_localctx, 34, RULE_minPop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(T__17);
			State = 209;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public MinLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterMinLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitMinLevel(this);
		}
	}

	[RuleVersion(0)]
	public MinLevelContext minLevel() {
		MinLevelContext _localctx = new MinLevelContext(Context, State);
		EnterRule(_localctx, 36, RULE_minLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__18);
			State = 212;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public MaxLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterMaxLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitMaxLevel(this);
		}
	}

	[RuleVersion(0)]
	public MaxLevelContext maxLevel() {
		MaxLevelContext _localctx = new MaxLevelContext(Context, State);
		EnterRule(_localctx, 38, RULE_maxLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(T__19);
			State = 215;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		public HeroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hero; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterHero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitHero(this);
		}
	}

	[RuleVersion(0)]
	public HeroContext hero() {
		HeroContext _localctx = new HeroContext(Context, State);
		EnterRule(_localctx, 40, RULE_hero);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(T__20);
			State = 218;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public TierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterTier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitTier(this);
		}
	}

	[RuleVersion(0)]
	public TierContext tier() {
		TierContext _localctx = new TierContext(Context, State);
		EnterRule(_localctx, 42, RULE_tier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(T__21);
			State = 221;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BadgeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusLeagueParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		public BadgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_badge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterBadge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitBadge(this);
		}
	}

	[RuleVersion(0)]
	public BadgeContext badge() {
		BadgeContext _localctx = new BadgeContext(Context, State);
		EnterRule(_localctx, 44, RULE_badge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(T__22);
			State = 224;
			Match(INT);
			State = 225;
			Match(COMMA);
			State = 226;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeCompletionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public PrizeCompletionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeCompletion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterPrizeCompletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitPrizeCompletion(this);
		}
	}

	[RuleVersion(0)]
	public PrizeCompletionContext prizeCompletion() {
		PrizeCompletionContext _localctx = new PrizeCompletionContext(Context, State);
		EnterRule(_localctx, 46, RULE_prizeCompletion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(T__23);
			State = 229;
			Match(STRING);
			State = 230;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeMasteryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public PrizeMasteryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeMastery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterPrizeMastery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitPrizeMastery(this);
		}
	}

	[RuleVersion(0)]
	public PrizeMasteryContext prizeMastery() {
		PrizeMasteryContext _localctx = new PrizeMasteryContext(Context, State);
		EnterRule(_localctx, 48, RULE_prizeMastery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(T__24);
			State = 233;
			Match(STRING);
			State = 234;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeagueImageContext : ParserRuleContext {
		public LeagueImageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leagueImage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterLeagueImage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitLeagueImage(this);
		}
	}

	[RuleVersion(0)]
	public LeagueImageContext leagueImage() {
		LeagueImageContext _localctx = new LeagueImageContext(Context, State);
		EnterRule(_localctx, 50, RULE_leagueImage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncounterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusLeagueParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EncDescContext encDesc() {
			return GetRuleContext<EncDescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams() {
			return GetRuleContext<TeamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnHoverContext onHover() {
			return GetRuleContext<OnHoverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSelectContext onSelect() {
			return GetRuleContext<OnSelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnWinContext onWin() {
			return GetRuleContext<OnWinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyContext frequency() {
			return GetRuleContext<FrequencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignNotesContext designNotes() {
			return GetRuleContext<DesignNotesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncFileContext encFile() {
			return GetRuleContext<EncFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncptsContext encpts() {
			return GetRuleContext<EncptsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinLevelContext minLevel() {
			return GetRuleContext<MinLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxLevelContext maxLevel() {
			return GetRuleContext<MaxLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryFeeContext entryFee() {
			return GetRuleContext<EntryFeeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeTierContext[] prizeTier() {
			return GetRuleContexts<PrizeTierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeTierContext prizeTier(int i) {
			return GetRuleContext<PrizeTierContext>(i);
		}
		public EncounterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encounter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterEncounter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitEncounter(this);
		}
	}

	[RuleVersion(0)]
	public EncounterContext encounter() {
		EncounterContext _localctx = new EncounterContext(Context, State);
		EnterRule(_localctx, 52, RULE_encounter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(T__26);
			State = 239;
			Match(STRING);
			State = 240;
			Match(COMMA);
			State = 241;
			Match(INT);
			State = 242;
			encDesc();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 243;
				designNotes();
				}
			}

			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 246;
				encFile();
				}
			}

			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 249;
				encpts();
				}
			}

			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 252;
				minLevel();
				}
			}

			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 255;
				maxLevel();
				}
			}

			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 258;
				entryFee();
				}
			}

			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32) {
				{
				State = 261;
				type();
				}
			}

			State = 264;
			teams();
			State = 265;
			onHover();
			State = 266;
			onSelect();
			State = 267;
			onWin();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34) {
				{
				{
				State = 268;
				prizeTier();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274;
			frequency();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncDescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public EncDescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encDesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterEncDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitEncDesc(this);
		}
	}

	[RuleVersion(0)]
	public EncDescContext encDesc() {
		EncDescContext _localctx = new EncDescContext(Context, State);
		EnterRule(_localctx, 54, RULE_encDesc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(T__27);
			State = 277;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		public EncFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterEncFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitEncFile(this);
		}
	}

	[RuleVersion(0)]
	public EncFileContext encFile() {
		EncFileContext _localctx = new EncFileContext(Context, State);
		EnterRule(_localctx, 56, RULE_encFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__28);
			State = 280;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncptsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public EncptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encpts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterEncpts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitEncpts(this);
		}
	}

	[RuleVersion(0)]
	public EncptsContext encpts() {
		EncptsContext _localctx = new EncptsContext(Context, State);
		EnterRule(_localctx, 58, RULE_encpts);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(T__29);
			State = 283;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusLeagueParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusLeagueParser.INT, i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 60, RULE_teams);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__30);
			State = 286;
			Match(INT);
			State = 287;
			Match(INT);
			State = 288;
			Match(INT);
			State = 289;
			Match(INT);
			State = 290;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public FrequencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterFrequency(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitFrequency(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyContext frequency() {
		FrequencyContext _localctx = new FrequencyContext(Context, State);
		EnterRule(_localctx, 62, RULE_frequency);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(T__31);
			State = 293;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(T__32);
			State = 296;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryFeeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public EntryFeeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryFee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterEntryFee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitEntryFee(this);
		}
	}

	[RuleVersion(0)]
	public EntryFeeContext entryFee() {
		EntryFeeContext _localctx = new EntryFeeContext(Context, State);
		EnterRule(_localctx, 66, RULE_entryFee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(T__33);
			State = 299;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeTierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusLeagueParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusLeagueParser.INT, 0); }
		public PrizeTierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeTier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.EnterPrizeTier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusLeagueListener typedListener = listener as IGladiusLeagueListener;
			if (typedListener != null) typedListener.ExitPrizeTier(this);
		}
	}

	[RuleVersion(0)]
	public PrizeTierContext prizeTier() {
		PrizeTierContext _localctx = new PrizeTierContext(Context, State);
		EnterRule(_localctx, 68, RULE_prizeTier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(T__34);
			State = 302;
			Match(STRING);
			State = 303;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\x134', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', 'M', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', 'Q', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', 'T', 
		'\n', '\x2', '\x3', '\x2', '\a', '\x2', 'W', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'Z', '\v', '\x2', '\x3', '\x2', '\a', '\x2', ']', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '`', '\v', '\x2', '\x3', '\x2', '\x6', 
		'\x2', '\x63', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x64', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x91', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x95', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x99', '\n', '\v', '\x3', '\v', 
		'\x5', '\v', '\x9C', '\n', '\v', '\x3', '\v', '\a', '\v', '\x9F', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\xA2', '\v', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xA8', '\n', '\v', '\x3', 
		'\v', '\a', '\v', '\xAB', '\n', '\v', '\f', '\v', '\xE', '\v', '\xAE', 
		'\v', '\v', '\x3', '\v', '\a', '\v', '\xB1', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\xB4', '\v', '\v', '\x3', '\v', '\a', '\v', '\xB7', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xBA', '\v', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xF7', '\n', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\xFA', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xFD', 
		'\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x100', '\n', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x103', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x106', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x109', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x110', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x113', 
		'\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', 
		'\x2', '%', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', '\x2', '\x2', '\x2', '\x127', '\x2', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'k', '\x3', '\x2', '\x2', '\x2', '\b', 'n', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'q', '\x3', '\x2', '\x2', '\x2', '\f', 't', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'w', '\x3', '\x2', '\x2', '\x2', '\x10', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x86', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x16', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', ' ', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xCF', '\x3', '\x2', '\x2', '\x2', '$', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xD5', '\x3', '\x2', '\x2', '\x2', '(', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xDB', '\x3', '\x2', '\x2', '\x2', ',', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\x32', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x36', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x116', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '<', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x11F', '\x3', '\x2', '\x2', '\x2', '@', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x129', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x46', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\x5', '\x4', '\x3', '\x2', 'I', 'J', '\x5', '\x6', '\x4', 
		'\x2', 'J', 'L', '\x5', '\b', '\x5', '\x2', 'K', 'M', '\a', '\x3', '\x2', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', '\n', '\x6', 
		'\x2', 'O', 'Q', '\x5', '\f', '\a', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'T', '\x5', '\xE', '\b', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'W', '\x5', '\x10', '\t', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '^', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x5', '\x12', 
		'\n', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', '\x2', 
		'\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x5', '\x14', '\v', '\x2', 
		'\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\a', '\x4', '\x2', '\x2', 'g', 'h', '\a', '\x30', '\x2', 
		'\x2', 'h', 'i', '\a', '+', '\x2', '\x2', 'i', 'j', '\a', '\'', '\x2', 
		'\x2', 'j', '\x5', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\x5', 
		'\x2', '\x2', 'l', 'm', '\a', '\'', '\x2', '\x2', 'm', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\a', '\x6', '\x2', '\x2', 'o', 'p', '\a', '\'', 
		'\x2', '\x2', 'p', '\t', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\a', 
		'\x2', '\x2', 'r', 's', '\a', '\'', '\x2', '\x2', 's', '\v', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\a', '\b', '\x2', '\x2', 'u', 'v', '\a', '\'', 
		'\x2', '\x2', 'v', '\r', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\t', 
		'\x2', '\x2', 'x', 'y', '\a', '\x30', '\x2', '\x2', 'y', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\a', '\n', '\x2', '\x2', '{', '|', '\a', 
		'\x30', '\x2', '\x2', '|', '}', '\a', '\'', '\x2', '\x2', '}', '~', '\a', 
		'\'', '\x2', '\x2', '~', '\x7F', '\a', '\'', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\'', '\x2', '\x2', '\x80', '\x81', '\a', '\'', '\x2', '\x2', '\x81', 
		'\x82', '\a', '\'', '\x2', '\x2', '\x82', '\x83', '\a', '\'', '\x2', '\x2', 
		'\x83', '\x84', '\a', '\'', '\x2', '\x2', '\x84', '\x85', '\a', '\'', 
		'\x2', '\x2', '\x85', '\x11', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', 
		'\a', '\v', '\x2', '\x2', '\x87', '\x88', '\a', '\x30', '\x2', '\x2', 
		'\x88', '\x89', '\a', '\'', '\x2', '\x2', '\x89', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\a', '\f', '\x2', '\x2', '\x8B', '\x8C', 
		'\a', '\x30', '\x2', '\x2', '\x8C', '\x8D', '\a', '+', '\x2', '\x2', '\x8D', 
		'\x8E', '\a', '\'', '\x2', '\x2', '\x8E', '\x90', '\x5', '\x16', '\f', 
		'\x2', '\x8F', '\x91', '\x5', '\"', '\x12', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x5', '\x18', '\r', 
		'\x2', '\x93', '\x95', '\x5', '\x34', '\x1B', '\x2', '\x94', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x5', '\x1A', '\xE', 
		'\x2', '\x97', '\x99', '\x5', '$', '\x13', '\x2', '\x98', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x5', ',', '\x17', 
		'\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9F', '\x5', '.', '\x18', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x5', '\x1C', '\xF', '\x2', '\xA4', '\xA5', '\x5', 
		'\x1E', '\x10', '\x2', '\xA5', '\xA7', '\x5', ' ', '\x11', '\x2', '\xA6', 
		'\xA8', '\x5', '*', '\x16', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAB', '\x5', '\x30', '\x19', '\x2', '\xAA', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x5', '\x32', '\x1A', 
		'\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', '\x5', 
		'\x36', '\x1C', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\r', '\x2', '\x2', '\xBC', '\xBD', '\a', '\'', '\x2', '\x2', 
		'\xBD', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', '\xE', 
		'\x2', '\x2', '\xBF', '\xC0', '\a', '\'', '\x2', '\x2', '\xC0', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\xF', '\x2', '\x2', 
		'\xC2', '\xC3', '\a', '\'', '\x2', '\x2', '\xC3', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC5', '\a', '\x10', '\x2', '\x2', '\xC5', '\xC6', 
		'\a', '\'', '\x2', '\x2', '\xC6', '\xC7', '\a', '\'', '\x2', '\x2', '\xC7', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '\x11', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', '\'', '\x2', '\x2', '\xCA', '\xCB', '\a', 
		'\'', '\x2', '\x2', '\xCB', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\a', '\x12', '\x2', '\x2', '\xCD', '\xCE', '\a', '\'', '\x2', 
		'\x2', '\xCE', '!', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x13', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x30', '\x2', '\x2', '\xD1', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x14', '\x2', 
		'\x2', '\xD3', '\xD4', '\a', '\'', '\x2', '\x2', '\xD4', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\a', '\x15', '\x2', '\x2', '\xD6', '\xD7', 
		'\a', '\'', '\x2', '\x2', '\xD7', '\'', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD9', '\a', '\x16', '\x2', '\x2', '\xD9', '\xDA', '\a', '\'', '\x2', 
		'\x2', '\xDA', ')', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', 
		'\x17', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x30', '\x2', '\x2', '\xDD', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x18', '\x2', 
		'\x2', '\xDF', '\xE0', '\a', '\'', '\x2', '\x2', '\xE0', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\a', '\x19', '\x2', '\x2', '\xE2', '\xE3', 
		'\a', '\'', '\x2', '\x2', '\xE3', '\xE4', '\a', '+', '\x2', '\x2', '\xE4', 
		'\xE5', '\a', '\x30', '\x2', '\x2', '\xE5', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE7', '\a', '\x1A', '\x2', '\x2', '\xE7', '\xE8', '\a', 
		'\x30', '\x2', '\x2', '\xE8', '\xE9', '\a', '\'', '\x2', '\x2', '\xE9', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x1B', '\x2', 
		'\x2', '\xEB', '\xEC', '\a', '\x30', '\x2', '\x2', '\xEC', '\xED', '\a', 
		'\'', '\x2', '\x2', '\xED', '\x33', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\a', '\x1C', '\x2', '\x2', '\xEF', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\a', '\x1D', '\x2', '\x2', '\xF1', '\xF2', '\a', 
		'\x30', '\x2', '\x2', '\xF2', '\xF3', '\a', '+', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '\'', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\x38', '\x1D', 
		'\x2', '\xF5', '\xF7', '\x5', '\"', '\x12', '\x2', '\xF6', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', '\x5', ':', '\x1E', 
		'\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFD', '\x5', '<', '\x1F', '\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\x100', '\x5', '&', '\x14', '\x2', '\xFF', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x102', '\x3', '\x2', '\x2', '\x2', '\x101', '\x103', 
		'\x5', '(', '\x15', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x106', '\x5', '\x44', '#', '\x2', '\x105', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x108', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', 
		'\x5', '\x42', '\"', '\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10B', '\x5', '>', ' ', '\x2', '\x10B', 
		'\x10C', '\x5', '\x1C', '\xF', '\x2', '\x10C', '\x10D', '\x5', '\x1E', 
		'\x10', '\x2', '\x10D', '\x111', '\x5', ' ', '\x11', '\x2', '\x10E', '\x110', 
		'\x5', '\x46', '$', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\x5', '@', '!', '\x2', '\x115', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\a', '\x1E', '\x2', '\x2', '\x117', 
		'\x118', '\a', '\'', '\x2', '\x2', '\x118', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\a', '\x1F', '\x2', '\x2', '\x11A', '\x11B', 
		'\a', '\x30', '\x2', '\x2', '\x11B', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\a', ' ', '\x2', '\x2', '\x11D', '\x11E', '\a', '\'', 
		'\x2', '\x2', '\x11E', '=', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\a', '!', '\x2', '\x2', '\x120', '\x121', '\a', '\'', '\x2', '\x2', '\x121', 
		'\x122', '\a', '\'', '\x2', '\x2', '\x122', '\x123', '\a', '\'', '\x2', 
		'\x2', '\x123', '\x124', '\a', '\'', '\x2', '\x2', '\x124', '\x125', '\a', 
		'\'', '\x2', '\x2', '\x125', '?', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\a', '\"', '\x2', '\x2', '\x127', '\x128', '\a', '\'', '\x2', 
		'\x2', '\x128', '\x41', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', 
		'\a', '#', '\x2', '\x2', '\x12A', '\x12B', '\a', '\x30', '\x2', '\x2', 
		'\x12B', '\x43', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\a', '$', 
		'\x2', '\x2', '\x12D', '\x12E', '\a', '\'', '\x2', '\x2', '\x12E', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\a', '%', '\x2', '\x2', 
		'\x130', '\x131', '\a', '\x30', '\x2', '\x2', '\x131', '\x132', '\a', 
		'\'', '\x2', '\x2', '\x132', 'G', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'L', 'P', 'S', 'X', '^', '\x64', '\x90', '\x94', '\x98', '\x9B', '\xA0', 
		'\xA7', '\xAC', '\xB2', '\xB8', '\xF6', '\xF9', '\xFC', '\xFF', '\x102', 
		'\x105', '\x108', '\x111',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
