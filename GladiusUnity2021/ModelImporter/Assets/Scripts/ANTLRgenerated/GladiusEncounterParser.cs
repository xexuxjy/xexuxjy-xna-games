//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusEncounter.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusEncounterParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, ID=19, WS=20, INT=21, FLOAT=22, OBR=23, CBR=24, COMMA=25, NL=26, 
		STRING=27, SINGLELINE_COMMENT=28;
	public const int
		RULE_root = 0, RULE_encounterName = 1, RULE_ursulaEase = 2, RULE_valensEase = 3, 
		RULE_prizeTier = 4, RULE_scene = 5, RULE_gridFile = 6, RULE_propsFile = 7, 
		RULE_music = 8, RULE_battleScript = 9, RULE_cameraTrack = 10, RULE_totalPop = 11, 
		RULE_crowdLevel = 12, RULE_candie = 13, RULE_cutscene = 14, RULE_team = 15, 
		RULE_school = 16, RULE_unitDB = 17;
	public static readonly string[] ruleNames = {
		"root", "encounterName", "ursulaEase", "valensEase", "prizeTier", "scene", 
		"gridFile", "propsFile", "music", "battleScript", "cameraTrack", "totalPop", 
		"crowdLevel", "candie", "cutscene", "team", "school", "unitDB"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ENCOUNTERNAME:'", "'URSULAEASE:'", "'VALENSEASE:'", "'PRIZETIER'", 
		"'SCENE:'", "'GRIDFILE:'", "'PROPSFILE:'", "'MUSIC:'", "'BATTLESCRIPT:'", 
		"'CAMERATRACK:'", "'TOTALPOP:'", "'CROWDLEVEL:'", "'CANDIE:'", "'CUTSCENE:'", 
		"'NULL'", "'TEAM:'", "'SCHOOL:'", "'UNITDB:'", null, null, null, null, 
		"'{'", "'}'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "ID", "WS", "INT", "FLOAT", 
		"OBR", "CBR", "COMMA", "NL", "STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusEncounter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusEncounterParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusEncounterParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusEncounterParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EncounterNameContext encounterName() {
			return GetRuleContext<EncounterNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SceneContext scene() {
			return GetRuleContext<SceneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GridFileContext gridFile() {
			return GetRuleContext<GridFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrsulaEaseContext ursulaEase() {
			return GetRuleContext<UrsulaEaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValensEaseContext valensEase() {
			return GetRuleContext<ValensEaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeTierContext[] prizeTier() {
			return GetRuleContexts<PrizeTierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeTierContext prizeTier(int i) {
			return GetRuleContext<PrizeTierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropsFileContext propsFile() {
			return GetRuleContext<PropsFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MusicContext music() {
			return GetRuleContext<MusicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CameraTrackContext[] cameraTrack() {
			return GetRuleContexts<CameraTrackContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CameraTrackContext cameraTrack(int i) {
			return GetRuleContext<CameraTrackContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BattleScriptContext battleScript() {
			return GetRuleContext<BattleScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalPopContext totalPop() {
			return GetRuleContext<TotalPopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrowdLevelContext crowdLevel() {
			return GetRuleContext<CrowdLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CutsceneContext[] cutscene() {
			return GetRuleContexts<CutsceneContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CutsceneContext cutscene(int i) {
			return GetRuleContext<CutsceneContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CandieContext candie() {
			return GetRuleContext<CandieContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamContext[] team() {
			return GetRuleContexts<TeamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamContext team(int i) {
			return GetRuleContext<TeamContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			encounterName();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 37;
				ursulaEase();
				}
			}

			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 40;
				valensEase();
				}
			}

			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 43;
				prizeTier();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			scene();
			State = 50;
			gridFile();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 51;
				propsFile();
				}
			}

			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 54;
				music();
				}
			}

			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 57;
				cameraTrack();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 63;
				battleScript();
				}
			}

			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 66;
				totalPop();
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 69;
				crowdLevel();
				}
			}

			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 72;
				cutscene();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 78;
				candie();
				}
			}

			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 81;
				team();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__15 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncounterNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		public EncounterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encounterName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterEncounterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitEncounterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncounterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncounterNameContext encounterName() {
		EncounterNameContext _localctx = new EncounterNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_encounterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__0);
			State = 87;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrsulaEaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusEncounterParser.INT, 0); }
		public UrsulaEaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ursulaEase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterUrsulaEase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitUrsulaEase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrsulaEase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrsulaEaseContext ursulaEase() {
		UrsulaEaseContext _localctx = new UrsulaEaseContext(Context, State);
		EnterRule(_localctx, 4, RULE_ursulaEase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(T__1);
			State = 90;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValensEaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusEncounterParser.INT, 0); }
		public ValensEaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valensEase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterValensEase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitValensEase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValensEase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValensEaseContext valensEase() {
		ValensEaseContext _localctx = new ValensEaseContext(Context, State);
		EnterRule(_localctx, 6, RULE_valensEase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(T__2);
			State = 93;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeTierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusEncounterParser.INT, 0); }
		public PrizeTierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeTier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterPrizeTier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitPrizeTier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrizeTier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrizeTierContext prizeTier() {
		PrizeTierContext _localctx = new PrizeTierContext(Context, State);
		EnterRule(_localctx, 8, RULE_prizeTier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(T__3);
			State = 96;
			Match(STRING);
			State = 97;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SceneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		public SceneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scene; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterScene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitScene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScene(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SceneContext scene() {
		SceneContext _localctx = new SceneContext(Context, State);
		EnterRule(_localctx, 10, RULE_scene);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(T__4);
			State = 100;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		public GridFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterGridFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitGridFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridFileContext gridFile() {
		GridFileContext _localctx = new GridFileContext(Context, State);
		EnterRule(_localctx, 12, RULE_gridFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(T__5);
			State = 103;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropsFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		public PropsFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propsFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterPropsFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitPropsFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropsFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropsFileContext propsFile() {
		PropsFileContext _localctx = new PropsFileContext(Context, State);
		EnterRule(_localctx, 14, RULE_propsFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__6);
			State = 106;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MusicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		public MusicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_music; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterMusic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitMusic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMusic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MusicContext music() {
		MusicContext _localctx = new MusicContext(Context, State);
		EnterRule(_localctx, 16, RULE_music);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__7);
			State = 109;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BattleScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		public BattleScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_battleScript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterBattleScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitBattleScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBattleScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BattleScriptContext battleScript() {
		BattleScriptContext _localctx = new BattleScriptContext(Context, State);
		EnterRule(_localctx, 18, RULE_battleScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__8);
			State = 112;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CameraTrackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GladiusEncounterParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GladiusEncounterParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusEncounterParser.COMMA, 0); }
		public CameraTrackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cameraTrack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterCameraTrack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitCameraTrack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCameraTrack(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CameraTrackContext cameraTrack() {
		CameraTrackContext _localctx = new CameraTrackContext(Context, State);
		EnterRule(_localctx, 20, RULE_cameraTrack);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__9);
			State = 115;
			Match(STRING);
			State = 116;
			Match(COMMA);
			State = 117;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalPopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusEncounterParser.INT, 0); }
		public TotalPopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalPop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterTotalPop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitTotalPop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalPop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalPopContext totalPop() {
		TotalPopContext _localctx = new TotalPopContext(Context, State);
		EnterRule(_localctx, 22, RULE_totalPop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(T__10);
			State = 120;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrowdLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusEncounterParser.INT, 0); }
		public CrowdLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crowdLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterCrowdLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitCrowdLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrowdLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrowdLevelContext crowdLevel() {
		CrowdLevelContext _localctx = new CrowdLevelContext(Context, State);
		EnterRule(_localctx, 24, RULE_crowdLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__11);
			State = 123;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CandieContext : ParserRuleContext {
		public CandieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_candie; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterCandie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitCandie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCandie(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CandieContext candie() {
		CandieContext _localctx = new CandieContext(Context, State);
		EnterRule(_localctx, 26, RULE_candie);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CutsceneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GladiusEncounterParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GladiusEncounterParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusEncounterParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusEncounterParser.COMMA, i);
		}
		public CutsceneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cutscene; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterCutscene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitCutscene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCutscene(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CutsceneContext cutscene() {
		CutsceneContext _localctx = new CutsceneContext(Context, State);
		EnterRule(_localctx, 28, RULE_cutscene);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(T__13);
			State = 128;
			Match(STRING);
			State = 129;
			Match(COMMA);
			State = 130;
			Match(STRING);
			State = 131;
			Match(COMMA);
			State = 132;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusEncounterParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusEncounterParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GladiusEncounterParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GridFileContext gridFile() {
			return GetRuleContext<GridFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchoolContext school() {
			return GetRuleContext<SchoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitDBContext[] unitDB() {
			return GetRuleContexts<UnitDBContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitDBContext unitDB(int i) {
			return GetRuleContext<UnitDBContext>(i);
		}
		public TeamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterTeam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitTeam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamContext team() {
		TeamContext _localctx = new TeamContext(Context, State);
		EnterRule(_localctx, 30, RULE_team);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__15);
			State = 135;
			Match(INT);
			State = 136;
			Match(COMMA);
			State = 137;
			Match(INT);
			State = 138;
			gridFile();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 139;
				school();
				}
			}

			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 142;
				unitDB();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__17 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusEncounterParser.STRING, 0); }
		public SchoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_school; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterSchool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitSchool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchoolContext school() {
		SchoolContext _localctx = new SchoolContext(Context, State);
		EnterRule(_localctx, 32, RULE_school);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(T__16);
			State = 148;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitDBContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GladiusEncounterParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GladiusEncounterParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusEncounterParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusEncounterParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusEncounterParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusEncounterParser.INT, i);
		}
		public UnitDBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitDB; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.EnterUnitDB(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusEncounterListener typedListener = listener as IGladiusEncounterListener;
			if (typedListener != null) typedListener.ExitUnitDB(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusEncounterVisitor<TResult> typedVisitor = visitor as IGladiusEncounterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnitDB(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitDBContext unitDB() {
		UnitDBContext _localctx = new UnitDBContext(Context, State);
		EnterRule(_localctx, 34, RULE_unitDB);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__17);
			State = 151;
			Match(STRING);
			State = 152;
			Match(COMMA);
			State = 153;
			Match(INT);
			State = 154;
			Match(COMMA);
			State = 155;
			Match(STRING);
			State = 156;
			Match(COMMA);
			State = 157;
			Match(INT);
			State = 158;
			Match(COMMA);
			State = 159;
			Match(INT);
			State = 160;
			Match(COMMA);
			State = 161;
			Match(INT);
			State = 162;
			Match(COMMA);
			State = 163;
			Match(INT);
			State = 164;
			Match(COMMA);
			State = 165;
			Match(INT);
			State = 166;
			Match(COMMA);
			State = 167;
			Match(STRING);
			State = 168;
			Match(COMMA);
			State = 169;
			Match(STRING);
			State = 170;
			Match(COMMA);
			State = 171;
			Match(STRING);
			State = 172;
			Match(COMMA);
			State = 173;
			Match(STRING);
			State = 174;
			Match(COMMA);
			State = 175;
			Match(INT);
			State = 176;
			Match(COMMA);
			State = 177;
			Match(INT);
			State = 178;
			Match(COMMA);
			State = 179;
			Match(INT);
			State = 180;
			Match(COMMA);
			State = 181;
			Match(INT);
			State = 182;
			Match(COMMA);
			State = 183;
			Match(INT);
			State = 184;
			Match(COMMA);
			State = 185;
			Match(INT);
			State = 186;
			Match(COMMA);
			State = 187;
			Match(INT);
			State = 188;
			Match(COMMA);
			State = 189;
			Match(INT);
			State = 190;
			Match(COMMA);
			State = 191;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\xC4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', ')', '\n', '\x2', '\x3', 
		'\x2', '\x5', '\x2', ',', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '/', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x32', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x37', '\n', '\x2', '\x3', 
		'\x2', '\x5', '\x2', ':', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '=', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '@', '\v', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x43', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x46', 
		'\n', '\x2', '\x3', '\x2', '\x5', '\x2', 'I', '\n', '\x2', '\x3', '\x2', 
		'\a', '\x2', 'L', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'O', '\v', '\x2', 
		'\x3', '\x2', '\x5', '\x2', 'R', '\n', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'U', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 'V', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x8F', '\n', '\x11', '\x3', '\x11', '\x6', '\x11', '\x92', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x93', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '\x2', '\x2', '\x2', '\xBF', '\x2', '&', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'X', '\x3', '\x2', '\x2', '\x2', '\x6', '[', '\x3', '\x2', '\x2', 
		'\x2', '\b', '^', '\x3', '\x2', '\x2', '\x2', '\n', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x65', '\x3', '\x2', '\x2', '\x2', '\xE', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'k', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x14', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 't', '\x3', '\x2', '\x2', '\x2', '\x18', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '|', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x81', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\"', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x98', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', '\x4', 
		'\x3', '\x2', '\'', ')', '\x5', '\x6', '\x4', '\x2', '(', '\'', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x3', 
		'\x2', '\x2', '\x2', '*', ',', '\x5', '\b', '\x5', '\x2', '+', '*', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '-', '/', '\x5', '\n', '\x6', '\x2', '.', 
		'-', '\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x33', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x5', '\f', '\a', '\x2', 
		'\x34', '\x36', '\x5', '\xE', '\b', '\x2', '\x35', '\x37', '\x5', '\x10', 
		'\t', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x38', ':', '\x5', '\x12', '\n', '\x2', '\x39', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '>', '\x3', 
		'\x2', '\x2', '\x2', ';', '=', '\x5', '\x16', '\f', '\x2', '<', ';', '\x3', 
		'\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x43', '\x5', '\x14', '\v', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x46', '\x5', '\x18', '\r', '\x2', '\x45', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\x5', '\x1A', 
		'\xE', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'M', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x5', '\x1E', 
		'\x10', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'R', '\x5', '\x1C', '\xF', '\x2', 'Q', 'P', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 
		'T', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x5', ' ', '\x11', '\x2', 
		'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', '\x3', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x3', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\x1D', '\x2', '\x2', 'Z', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\a', '\x4', '\x2', '\x2', '\\', ']', '\a', '\x17', 
		'\x2', '\x2', ']', '\a', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\x5', 
		'\x2', '\x2', '_', '`', '\a', '\x17', '\x2', '\x2', '`', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x6', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\x1D', '\x2', '\x2', '\x63', '\x64', '\a', '\x17', '\x2', 
		'\x2', '\x64', '\v', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', 
		'\a', '\x2', '\x2', '\x66', 'g', '\a', '\x1D', '\x2', '\x2', 'g', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\b', '\x2', '\x2', 'i', 'j', 
		'\a', '\x1D', '\x2', '\x2', 'j', '\xF', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\a', '\t', '\x2', '\x2', 'l', 'm', '\a', '\x1D', '\x2', '\x2', 'm', 
		'\x11', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\n', '\x2', '\x2', 
		'o', 'p', '\a', '\x1D', '\x2', '\x2', 'p', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\v', '\x2', '\x2', 'r', 's', '\a', '\x1D', '\x2', 
		'\x2', 's', '\x15', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\f', 
		'\x2', '\x2', 'u', 'v', '\a', '\x1D', '\x2', '\x2', 'v', 'w', '\a', '\x1B', 
		'\x2', '\x2', 'w', 'x', '\a', '\x1D', '\x2', '\x2', 'x', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\a', '\r', '\x2', '\x2', 'z', '{', '\a', 
		'\x17', '\x2', '\x2', '{', '\x19', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\a', '\xE', '\x2', '\x2', '}', '~', '\a', '\x17', '\x2', '\x2', '~', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '\xF', '\x2', 
		'\x2', '\x80', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', 
		'\x10', '\x2', '\x2', '\x82', '\x83', '\a', '\x1D', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\x1B', '\x2', '\x2', '\x84', '\x85', '\a', '\x1D', '\x2', 
		'\x2', '\x85', '\x86', '\a', '\x1B', '\x2', '\x2', '\x86', '\x87', '\a', 
		'\x11', '\x2', '\x2', '\x87', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\x12', '\x2', '\x2', '\x89', '\x8A', '\a', '\x17', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '\x1B', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'\x17', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\xE', '\b', '\x2', '\x8D', 
		'\x8F', '\x5', '\"', '\x12', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x92', '\x5', '$', '\x13', '\x2', '\x91', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '!', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\x13', '\x2', '\x2', '\x96', '\x97', '\a', '\x1D', '\x2', 
		'\x2', '\x97', '#', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\x14', '\x2', '\x2', '\x99', '\x9A', '\a', '\x1D', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '\x1B', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x17', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\x1B', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'\x1D', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x1B', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', '\x17', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x1B', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x17', '\x2', '\x2', '\xA2', '\xA3', '\a', 
		'\x1B', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x17', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x1B', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x17', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '\x1B', '\x2', '\x2', '\xA7', '\xA8', '\a', 
		'\x17', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x1B', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x1D', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x1B', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\x1D', '\x2', '\x2', '\xAC', '\xAD', '\a', 
		'\x1B', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1D', '\x2', '\x2', '\xAE', 
		'\xAF', '\a', '\x1B', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x1D', '\x2', 
		'\x2', '\xB0', '\xB1', '\a', '\x1B', '\x2', '\x2', '\xB1', '\xB2', '\a', 
		'\x17', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x1B', '\x2', '\x2', '\xB3', 
		'\xB4', '\a', '\x17', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x1B', '\x2', 
		'\x2', '\xB5', '\xB6', '\a', '\x17', '\x2', '\x2', '\xB6', '\xB7', '\a', 
		'\x1B', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x17', '\x2', '\x2', '\xB8', 
		'\xB9', '\a', '\x1B', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x17', '\x2', 
		'\x2', '\xBA', '\xBB', '\a', '\x1B', '\x2', '\x2', '\xBB', '\xBC', '\a', 
		'\x17', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x1B', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\x17', '\x2', '\x2', '\xBE', '\xBF', '\a', '\x1B', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '\x17', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'\x1B', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x17', '\x2', '\x2', '\xC2', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x10', '(', '+', '\x30', '\x36', '\x39', 
		'>', '\x42', '\x45', 'H', 'M', 'Q', 'V', '\x8E', '\x93',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
