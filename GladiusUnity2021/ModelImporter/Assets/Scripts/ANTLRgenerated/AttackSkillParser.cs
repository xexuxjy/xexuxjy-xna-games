//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AttackSkill.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class AttackSkillParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, ID=83, WS=84, FLOAT=85, OBR=86, CBR=87, COMMA=88, 
		STRING=89, SINGLELINE_COMMENT=90;
	public const int
		RULE_root = 0, RULE_numEntries = 1, RULE_create = 2, RULE_skillProperty = 3, 
		RULE_animBlock = 4, RULE_fxBlock = 5, RULE_effectBlock = 6, RULE_statusBlock = 7, 
		RULE_projectileBlock = 8, RULE_createDef = 9, RULE_useClass = 10, RULE_displayNameId = 11, 
		RULE_descriptionId = 12, RULE_level = 13, RULE_jobPointCost = 14, RULE_prereq = 15, 
		RULE_attribute = 16, RULE_costs = 17, RULE_shiftData = 18, RULE_affCost = 19, 
		RULE_effect = 20, RULE_effectFX = 21, RULE_splitEffect = 22, RULE_splitEffectCondition = 23, 
		RULE_effectSkillCond = 24, RULE_combatMods = 25, RULE_moveToAttackMod = 26, 
		RULE_affinity = 27, RULE_range = 28, RULE_excludeRange = 29, RULE_meter = 30, 
		RULE_anim = 31, RULE_loopAnim = 32, RULE_moveAnim = 33, RULE_defendAnim = 34, 
		RULE_lowAnim = 35, RULE_chargeAnim = 36, RULE_animTime = 37, RULE_animStartFrame = 38, 
		RULE_fx = 39, RULE_fxSwing = 40, RULE_fxCTAG = 41, RULE_fxProjectile = 42, 
		RULE_projectile = 43, RULE_projectileSequence = 44, RULE_projectileRotation = 45, 
		RULE_projectileAttr = 46, RULE_status = 47, RULE_statusDuration = 48, 
		RULE_statusTarget = 49, RULE_statusSituationAffinityCondition = 50, RULE_statusChance = 51, 
		RULE_effectStatusCond = 52, RULE_statusInterval = 53, RULE_statusCondition = 54, 
		RULE_skillStatusSituationUnitCondition = 55, RULE_skillStatusSituationStatusCondition = 56, 
		RULE_animSpeed = 57, RULE_targetCondition = 58, RULE_effectRange = 59, 
		RULE_effectCondition = 60, RULE_subSkill = 61, RULE_proxy = 62, RULE_weaponReq = 63, 
		RULE_comboButton = 64, RULE_fxProjectileImpact = 65, RULE_sound = 66, 
		RULE_skillFree = 67, RULE_multiHitData = 68, RULE_usabilityCondition = 69, 
		RULE_summonData = 70, RULE_moveRange = 71, RULE_moveRangeCondition = 72, 
		RULE_replaces = 73, RULE_statusSituationSkillCondition = 74, RULE_fxMove = 75, 
		RULE_distanceDelay = 76, RULE_statusUseLimit = 77;
	public static readonly string[] ruleNames = {
		"root", "numEntries", "create", "skillProperty", "animBlock", "fxBlock", 
		"effectBlock", "statusBlock", "projectileBlock", "createDef", "useClass", 
		"displayNameId", "descriptionId", "level", "jobPointCost", "prereq", "attribute", 
		"costs", "shiftData", "affCost", "effect", "effectFX", "splitEffect", 
		"splitEffectCondition", "effectSkillCond", "combatMods", "moveToAttackMod", 
		"affinity", "range", "excludeRange", "meter", "anim", "loopAnim", "moveAnim", 
		"defendAnim", "lowAnim", "chargeAnim", "animTime", "animStartFrame", "fx", 
		"fxSwing", "fxCTAG", "fxProjectile", "projectile", "projectileSequence", 
		"projectileRotation", "projectileAttr", "status", "statusDuration", "statusTarget", 
		"statusSituationAffinityCondition", "statusChance", "effectStatusCond", 
		"statusInterval", "statusCondition", "skillStatusSituationUnitCondition", 
		"skillStatusSituationStatusCondition", "animSpeed", "targetCondition", 
		"effectRange", "effectCondition", "subSkill", "proxy", "weaponReq", "comboButton", 
		"fxProjectileImpact", "sound", "skillFree", "multiHitData", "usabilityCondition", 
		"summonData", "moveRange", "moveRangeCondition", "replaces", "statusSituationSkillCondition", 
		"fxMove", "distanceDelay", "statusUseLimit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'NUMENTRIES:'", "'SKILLCREATE:'", "'SKILLUSECLASS:'", "'SKILLDISPLAYNAMEID:'", 
		"'SKILLDESCRIPTIONID:'", "'SKILLLEVEL:'", "'SKILLJOBPOINTCOST:'", "'SKILLPREREQ:'", 
		"'SKILLATTRIBUTE:'", "'SKILLCOSTS:'", "'SKILLSHIFTDATA:'", "'SKILLAFFCOST:'", 
		"'SKILLEFFECT:'", "'SKILLEFFECTFX:'", "'SKILLSPLITEFFECT:'", "'SKILLSPLITEFFECTCONDITION:'", 
		"'SKILLEFFECTSKILLCOND:'", "'SKILLCOMBATMODS:'", "'SKILLMOVETOATTACKMOD:'", 
		"'SKILLAFFINITY:'", "'SKILLRANGE:'", "'SKILLEXCLUDERANGE:'", "'SKILLMETER:'", 
		"'SKILLANIM:'", "'SKILLLOOPANIM:'", "'SKILLMOVEANIM:'", "'SKILLDEFENDHANIM:'", 
		"'SKILLLOWANIM:'", "'SKILLCHARGEANIM:'", "'SKILLANIMTIME:'", "'SKILLANIMSTARTFRAME:'", 
		"'SKILLFX:'", "'SKILLFXSWING:'", "'SKILLFXCTAG:'", "'SKILLFXPROJECTILE:'", 
		"'SKILLPROJECTILE:'", "'SKILLPROJECTILESEQUENCE:'", "'SKILLPROJECTILEROTATION:'", 
		"'SKILLPROJECTILEATTR:'", "'SKILLSTATUS:'", "'SKILLSTATUS2:'", "'SKILLSTATUSDURATION:'", 
		"'SKILLSTATUSDURATION2:'", "'SKILLSTATUSTARGET:'", "'SKILLSTATUSTARGET2:'", 
		"'SKILLSTATUSSITUATIONAFFINITYCONDITION:'", "'SKILLSTATUSSITUATIONAFFINITYCONDITION2:'", 
		"'SKILLSTATUSCHANCE:'", "'SKILLSTATUSCHANCE2:'", "'SKILLEFFECTSTATUSCOND:'", 
		"'SKILLSTATUSINTERVAL:'", "'SKILLSTATUSINTERVAL2:'", "'SKILLSTATUSCONDITION:'", 
		"'SKILLSTATUSCONDITION2:'", "'SKILLSTATUSSITUATIONUNITCONDITION:'", "'SKILLSTATUSSITUATIONUNITCONDITION2:'", 
		"'SKILLSTATUSSITUATIONSTATUSCONDITION:'", "'SKILLSTATUSSITUATIONSTATUSCONDITION2:'", 
		"'SKILLANIMSPEED:'", "'SKILLTARGETCONDITION:'", "'SKILLEFFECTRANGE:'", 
		"'SKILLEFFECTCONDITION:'", "'SKILLSUBSKILL:'", "'SKILLPROXY:'", "'SKILLWEAPONREQ:'", 
		"'SKILLCOMBOBUTTON:'", "'SKILLFXPROJECTILEIMPACT:'", "'SKILLSOUND:'", 
		"'SKILLFREE1:'", "'SKILLFREE2:'", "'SKILLFREE3:'", "'SKILLFREE4:'", "'SKILLMULTIHITDATA:'", 
		"'SKILLUSABILITYCONDITION:'", "'SKILLSUMMONDATA:'", "'SKILLMOVERANGE:'", 
		"'SKILLMOVERANGECONDITION:'", "'SKILLREPLACES:'", "'SKILLSTATUSSITUATIONSKILLCONDITION:'", 
		"'SKILLFXMOVE:'", "'SKILLDISTANCEDELAY:'", "'SKILLSTATUSUSELIMIT:'", null, 
		null, null, "'{'", "'}'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "ID", 
		"WS", "FLOAT", "OBR", "CBR", "COMMA", "STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AttackSkill.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AttackSkillParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AttackSkillParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AttackSkillParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumEntriesContext numEntries() {
			return GetRuleContext<NumEntriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContext[] create() {
			return GetRuleContexts<CreateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContext create(int i) {
			return GetRuleContext<CreateContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			numEntries();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 157;
				create();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumEntriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public NumEntriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numEntries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterNumEntries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitNumEntries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumEntries(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumEntriesContext numEntries() {
		NumEntriesContext _localctx = new NumEntriesContext(Context, State);
		EnterRule(_localctx, 2, RULE_numEntries);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__0);
			State = 163;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefContext createDef() {
			return GetRuleContext<CreateDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkillPropertyContext[] skillProperty() {
			return GetRuleContexts<SkillPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkillPropertyContext skillProperty(int i) {
			return GetRuleContext<SkillPropertyContext>(i);
		}
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 4, RULE_create);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			createDef();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 166;
				skillProperty();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UseClassContext useClass() {
			return GetRuleContext<UseClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombatModsContext combatMods() {
			return GetRuleContext<CombatModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveToAttackModContext moveToAttackMod() {
			return GetRuleContext<MoveToAttackModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AffinityContext affinity() {
			return GetRuleContext<AffinityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsabilityConditionContext usabilityCondition() {
			return GetRuleContext<UsabilityConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExcludeRangeContext excludeRange() {
			return GetRuleContext<ExcludeRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiHitDataContext multiHitData() {
			return GetRuleContext<MultiHitDataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetConditionContext targetCondition() {
			return GetRuleContext<TargetConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveRangeContext moveRange() {
			return GetRuleContext<MoveRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveRangeConditionContext moveRangeCondition() {
			return GetRuleContext<MoveRangeConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummonDataContext summonData() {
			return GetRuleContext<SummonDataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProxyContext proxy() {
			return GetRuleContext<ProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubSkillContext subSkill() {
			return GetRuleContext<SubSkillContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeterContext meter() {
			return GetRuleContext<MeterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComboButtonContext comboButton() {
			return GetRuleContext<ComboButtonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimSpeedContext animSpeed() {
			return GetRuleContext<AnimSpeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimBlockContext animBlock() {
			return GetRuleContext<AnimBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxBlockContext fxBlock() {
			return GetRuleContext<FxBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistanceDelayContext distanceDelay() {
			return GetRuleContext<DistanceDelayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectBlockContext effectBlock() {
			return GetRuleContext<EffectBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProjectileBlockContext projectileBlock() {
			return GetRuleContext<ProjectileBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusBlockContext statusBlock() {
			return GetRuleContext<StatusBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftDataContext shiftData() {
			return GetRuleContext<ShiftDataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkillFreeContext skillFree() {
			return GetRuleContext<SkillFreeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CostsContext costs() {
			return GetRuleContext<CostsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AffCostContext affCost() {
			return GetRuleContext<AffCostContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrereqContext prereq() {
			return GetRuleContext<PrereqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JobPointCostContext jobPointCost() {
			return GetRuleContext<JobPointCostContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelContext level() {
			return GetRuleContext<LevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionIdContext descriptionId() {
			return GetRuleContext<DescriptionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisplayNameIdContext displayNameId() {
			return GetRuleContext<DisplayNameIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeaponReqContext weaponReq() {
			return GetRuleContext<WeaponReqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacesContext replaces() {
			return GetRuleContext<ReplacesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusUseLimitContext statusUseLimit() {
			return GetRuleContext<StatusUseLimitContext>(0);
		}
		public SkillPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSkillProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSkillProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillPropertyContext skillProperty() {
		SkillPropertyContext _localctx = new SkillPropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_skillProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 171;
				useClass();
				}
				break;
			case T__8:
				{
				State = 172;
				attribute();
				}
				break;
			case T__17:
				{
				State = 173;
				combatMods();
				}
				break;
			case T__18:
				{
				State = 174;
				moveToAttackMod();
				}
				break;
			case T__19:
				{
				State = 175;
				affinity();
				}
				break;
			case T__20:
				{
				State = 176;
				range();
				}
				break;
			case T__73:
				{
				State = 177;
				usabilityCondition();
				}
				break;
			case T__21:
				{
				State = 178;
				excludeRange();
				}
				break;
			case T__72:
				{
				State = 179;
				multiHitData();
				}
				break;
			case T__59:
				{
				State = 180;
				targetCondition();
				}
				break;
			case T__75:
				{
				State = 181;
				moveRange();
				}
				break;
			case T__76:
				{
				State = 182;
				moveRangeCondition();
				}
				break;
			case T__74:
				{
				State = 183;
				summonData();
				}
				break;
			case T__63:
				{
				State = 184;
				proxy();
				}
				break;
			case T__62:
				{
				State = 185;
				subSkill();
				}
				break;
			case T__22:
				{
				State = 186;
				meter();
				}
				break;
			case T__65:
				{
				State = 187;
				comboButton();
				}
				break;
			case T__58:
				{
				State = 188;
				animSpeed();
				}
				break;
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
				{
				State = 189;
				animBlock();
				}
				break;
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__66:
			case T__67:
			case T__79:
				{
				State = 190;
				fxBlock();
				}
				break;
			case T__80:
				{
				State = 191;
				distanceDelay();
				}
				break;
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__49:
			case T__60:
			case T__61:
				{
				State = 192;
				effectBlock();
				}
				break;
			case T__35:
			case T__36:
			case T__37:
			case T__38:
				{
				State = 193;
				projectileBlock();
				}
				break;
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__78:
				{
				State = 194;
				statusBlock();
				}
				break;
			case T__10:
				{
				State = 195;
				shiftData();
				}
				break;
			case T__68:
			case T__69:
			case T__70:
			case T__71:
				{
				State = 196;
				skillFree();
				}
				break;
			case T__9:
				{
				State = 197;
				costs();
				}
				break;
			case T__11:
				{
				State = 198;
				affCost();
				}
				break;
			case T__7:
				{
				State = 199;
				prereq();
				}
				break;
			case T__6:
				{
				State = 200;
				jobPointCost();
				}
				break;
			case T__5:
				{
				State = 201;
				level();
				}
				break;
			case T__4:
				{
				State = 202;
				descriptionId();
				}
				break;
			case T__3:
				{
				State = 203;
				displayNameId();
				}
				break;
			case T__64:
				{
				State = 204;
				weaponReq();
				}
				break;
			case T__77:
				{
				State = 205;
				replaces();
				}
				break;
			case T__81:
				{
				State = 206;
				statusUseLimit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnimTimeContext animTime() {
			return GetRuleContext<AnimTimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimStartFrameContext animStartFrame() {
			return GetRuleContext<AnimStartFrameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimContext anim() {
			return GetRuleContext<AnimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopAnimContext loopAnim() {
			return GetRuleContext<LoopAnimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveAnimContext moveAnim() {
			return GetRuleContext<MoveAnimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefendAnimContext defendAnim() {
			return GetRuleContext<DefendAnimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowAnimContext lowAnim() {
			return GetRuleContext<LowAnimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAnimContext chargeAnim() {
			return GetRuleContext<ChargeAnimContext>(0);
		}
		public AnimBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAnimBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAnimBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimBlockContext animBlock() {
		AnimBlockContext _localctx = new AnimBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_animBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				{
				State = 209;
				animTime();
				}
				break;
			case T__30:
				{
				State = 210;
				animStartFrame();
				}
				break;
			case T__23:
				{
				State = 211;
				anim();
				}
				break;
			case T__24:
				{
				State = 212;
				loopAnim();
				}
				break;
			case T__25:
				{
				State = 213;
				moveAnim();
				}
				break;
			case T__26:
				{
				State = 214;
				defendAnim();
				}
				break;
			case T__27:
				{
				State = 215;
				lowAnim();
				}
				break;
			case T__28:
				{
				State = 216;
				chargeAnim();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FxContext fx() {
			return GetRuleContext<FxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxSwingContext fxSwing() {
			return GetRuleContext<FxSwingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundContext sound() {
			return GetRuleContext<SoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxCTAGContext fxCTAG() {
			return GetRuleContext<FxCTAGContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxProjectileContext fxProjectile() {
			return GetRuleContext<FxProjectileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxProjectileImpactContext fxProjectileImpact() {
			return GetRuleContext<FxProjectileImpactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FxMoveContext fxMove() {
			return GetRuleContext<FxMoveContext>(0);
		}
		public FxBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fxBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterFxBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitFxBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFxBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxBlockContext fxBlock() {
		FxBlockContext _localctx = new FxBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_fxBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				{
				State = 219;
				fx();
				}
				break;
			case T__32:
				{
				State = 220;
				fxSwing();
				}
				break;
			case T__67:
				{
				State = 221;
				sound();
				}
				break;
			case T__33:
				{
				State = 222;
				fxCTAG();
				}
				break;
			case T__34:
				{
				State = 223;
				fxProjectile();
				}
				break;
			case T__66:
				{
				State = 224;
				fxProjectileImpact();
				}
				break;
			case T__79:
				{
				State = 225;
				fxMove();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectSkillCondContext effectSkillCond() {
			return GetRuleContext<EffectSkillCondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectRangeContext effectRange() {
			return GetRuleContext<EffectRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SplitEffectContext splitEffect() {
			return GetRuleContext<SplitEffectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SplitEffectConditionContext splitEffectCondition() {
			return GetRuleContext<SplitEffectConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectFXContext effectFX() {
			return GetRuleContext<EffectFXContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectConditionContext effectCondition() {
			return GetRuleContext<EffectConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectStatusCondContext effectStatusCond() {
			return GetRuleContext<EffectStatusCondContext>(0);
		}
		public EffectBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterEffectBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitEffectBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectBlockContext effectBlock() {
		EffectBlockContext _localctx = new EffectBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_effectBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 228;
				effect();
				}
				break;
			case 2:
				{
				State = 229;
				effectSkillCond();
				}
				break;
			case 3:
				{
				State = 230;
				effectRange();
				}
				break;
			case 4:
				{
				State = 231;
				splitEffect();
				}
				break;
			case 5:
				{
				State = 232;
				splitEffectCondition();
				}
				break;
			case 6:
				{
				State = 233;
				effectFX();
				}
				break;
			case 7:
				{
				State = 234;
				effectCondition();
				}
				break;
			case 8:
				{
				State = 235;
				splitEffectCondition();
				}
				break;
			case 9:
				{
				State = 236;
				effectStatusCond();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatusContext status() {
			return GetRuleContext<StatusContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusDurationContext statusDuration() {
			return GetRuleContext<StatusDurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkillStatusSituationStatusConditionContext skillStatusSituationStatusCondition() {
			return GetRuleContext<SkillStatusSituationStatusConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusIntervalContext statusInterval() {
			return GetRuleContext<StatusIntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusTargetContext statusTarget() {
			return GetRuleContext<StatusTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusSituationAffinityConditionContext statusSituationAffinityCondition() {
			return GetRuleContext<StatusSituationAffinityConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkillStatusSituationUnitConditionContext skillStatusSituationUnitCondition() {
			return GetRuleContext<SkillStatusSituationUnitConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusChanceContext statusChance() {
			return GetRuleContext<StatusChanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusConditionContext statusCondition() {
			return GetRuleContext<StatusConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatusSituationSkillConditionContext statusSituationSkillCondition() {
			return GetRuleContext<StatusSituationSkillConditionContext>(0);
		}
		public StatusBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusBlockContext statusBlock() {
		StatusBlockContext _localctx = new StatusBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_statusBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
			case T__40:
				{
				State = 239;
				status();
				}
				break;
			case T__41:
			case T__42:
				{
				State = 240;
				statusDuration();
				}
				break;
			case T__56:
			case T__57:
				{
				State = 241;
				skillStatusSituationStatusCondition();
				}
				break;
			case T__50:
			case T__51:
				{
				State = 242;
				statusInterval();
				}
				break;
			case T__43:
			case T__44:
				{
				State = 243;
				statusTarget();
				}
				break;
			case T__45:
			case T__46:
				{
				State = 244;
				statusSituationAffinityCondition();
				}
				break;
			case T__54:
			case T__55:
				{
				State = 245;
				skillStatusSituationUnitCondition();
				}
				break;
			case T__47:
			case T__48:
				{
				State = 246;
				statusChance();
				}
				break;
			case T__52:
			case T__53:
				{
				State = 247;
				statusCondition();
				}
				break;
			case T__78:
				{
				State = 248;
				statusSituationSkillCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProjectileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProjectileContext projectile() {
			return GetRuleContext<ProjectileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProjectileSequenceContext projectileSequence() {
			return GetRuleContext<ProjectileSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProjectileAttrContext projectileAttr() {
			return GetRuleContext<ProjectileAttrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProjectileRotationContext projectileRotation() {
			return GetRuleContext<ProjectileRotationContext>(0);
		}
		public ProjectileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_projectileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterProjectileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitProjectileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProjectileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProjectileBlockContext projectileBlock() {
		ProjectileBlockContext _localctx = new ProjectileBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_projectileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
				{
				State = 251;
				projectile();
				}
				break;
			case T__36:
				{
				State = 252;
				projectileSequence();
				}
				break;
			case T__38:
				{
				State = 253;
				projectileAttr();
				}
				break;
			case T__37:
				{
				State = 254;
				projectileRotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AttackSkillParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AttackSkillParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		public CreateDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterCreateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitCreateDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefContext createDef() {
		CreateDefContext _localctx = new CreateDefContext(Context, State);
		EnterRule(_localctx, 18, RULE_createDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(T__1);
			State = 258;
			Match(STRING);
			State = 259;
			Match(COMMA);
			State = 260;
			Match(STRING);
			State = 261;
			Match(COMMA);
			State = 262;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public UseClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterUseClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitUseClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseClassContext useClass() {
		UseClassContext _localctx = new UseClassContext(Context, State);
		EnterRule(_localctx, 20, RULE_useClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(T__2);
			State = 265;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayNameIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public DisplayNameIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayNameId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterDisplayNameId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitDisplayNameId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayNameId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayNameIdContext displayNameId() {
		DisplayNameIdContext _localctx = new DisplayNameIdContext(Context, State);
		EnterRule(_localctx, 22, RULE_displayNameId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(T__3);
			State = 268;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public DescriptionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterDescriptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitDescriptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionIdContext descriptionId() {
		DescriptionIdContext _localctx = new DescriptionIdContext(Context, State);
		EnterRule(_localctx, 24, RULE_descriptionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(T__4);
			State = 271;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public LevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelContext level() {
		LevelContext _localctx = new LevelContext(Context, State);
		EnterRule(_localctx, 26, RULE_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(T__5);
			State = 274;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JobPointCostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public JobPointCostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jobPointCost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterJobPointCost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitJobPointCost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJobPointCost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JobPointCostContext jobPointCost() {
		JobPointCostContext _localctx = new JobPointCostContext(Context, State);
		EnterRule(_localctx, 28, RULE_jobPointCost);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(T__6);
			State = 277;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrereqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public PrereqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prereq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterPrereq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitPrereq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrereq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrereqContext prereq() {
		PrereqContext _localctx = new PrereqContext(Context, State);
		EnterRule(_localctx, 30, RULE_prereq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__7);
			State = 280;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 32, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(T__8);
			State = 283;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CostsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		public CostsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_costs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterCosts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitCosts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CostsContext costs() {
		CostsContext _localctx = new CostsContext(Context, State);
		EnterRule(_localctx, 34, RULE_costs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__9);
			State = 286;
			Match(FLOAT);
			State = 287;
			Match(COMMA);
			State = 288;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AttackSkillParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AttackSkillParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		public ShiftDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterShiftData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitShiftData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftDataContext shiftData() {
		ShiftDataContext _localctx = new ShiftDataContext(Context, State);
		EnterRule(_localctx, 36, RULE_shiftData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(T__10);
			State = 291;
			Match(STRING);
			State = 292;
			Match(COMMA);
			State = 293;
			Match(STRING);
			State = 294;
			Match(COMMA);
			State = 295;
			Match(FLOAT);
			State = 296;
			Match(COMMA);
			State = 297;
			Match(FLOAT);
			State = 298;
			Match(COMMA);
			State = 299;
			Match(FLOAT);
			State = 300;
			Match(COMMA);
			State = 301;
			Match(FLOAT);
			State = 302;
			Match(COMMA);
			State = 303;
			Match(FLOAT);
			State = 304;
			Match(COMMA);
			State = 305;
			Match(FLOAT);
			State = 306;
			Match(COMMA);
			State = 307;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AffCostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public AffCostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_affCost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAffCost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAffCost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAffCost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AffCostContext affCost() {
		AffCostContext _localctx = new AffCostContext(Context, State);
		EnterRule(_localctx, 38, RULE_affCost);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(T__11);
			State = 310;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(Context, State);
		EnterRule(_localctx, 40, RULE_effect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(T__12);
			State = 313;
			Match(STRING);
			State = 314;
			Match(COMMA);
			State = 315;
			Match(FLOAT);
			State = 316;
			Match(COMMA);
			State = 317;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectFXContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public EffectFXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectFX; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterEffectFX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitEffectFX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectFX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectFXContext effectFX() {
		EffectFXContext _localctx = new EffectFXContext(Context, State);
		EnterRule(_localctx, 42, RULE_effectFX);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(T__13);
			State = 320;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SplitEffectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public SplitEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_splitEffect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSplitEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSplitEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSplitEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SplitEffectContext splitEffect() {
		SplitEffectContext _localctx = new SplitEffectContext(Context, State);
		EnterRule(_localctx, 44, RULE_splitEffect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(T__14);
			State = 323;
			Match(STRING);
			State = 324;
			Match(COMMA);
			State = 325;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SplitEffectConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public SplitEffectConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_splitEffectCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSplitEffectCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSplitEffectCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSplitEffectCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SplitEffectConditionContext splitEffectCondition() {
		SplitEffectConditionContext _localctx = new SplitEffectConditionContext(Context, State);
		EnterRule(_localctx, 46, RULE_splitEffectCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(T__15);
			State = 328;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectSkillCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public EffectSkillCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectSkillCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterEffectSkillCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitEffectSkillCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectSkillCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectSkillCondContext effectSkillCond() {
		EffectSkillCondContext _localctx = new EffectSkillCondContext(Context, State);
		EnterRule(_localctx, 48, RULE_effectSkillCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(T__16);
			State = 331;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombatModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		public CombatModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combatMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterCombatMods(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitCombatMods(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombatMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CombatModsContext combatMods() {
		CombatModsContext _localctx = new CombatModsContext(Context, State);
		EnterRule(_localctx, 50, RULE_combatMods);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(T__17);
			State = 334;
			Match(FLOAT);
			State = 335;
			Match(COMMA);
			State = 336;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveToAttackModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public MoveToAttackModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveToAttackMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterMoveToAttackMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitMoveToAttackMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveToAttackMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveToAttackModContext moveToAttackMod() {
		MoveToAttackModContext _localctx = new MoveToAttackModContext(Context, State);
		EnterRule(_localctx, 52, RULE_moveToAttackMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(T__18);
			State = 339;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AffinityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public AffinityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_affinity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAffinity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAffinity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAffinity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AffinityContext affinity() {
		AffinityContext _localctx = new AffinityContext(Context, State);
		EnterRule(_localctx, 54, RULE_affinity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(T__19);
			State = 342;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 56, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(T__20);
			State = 345;
			Match(FLOAT);
			State = 346;
			Match(COMMA);
			State = 347;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExcludeRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public ExcludeRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_excludeRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterExcludeRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitExcludeRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcludeRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExcludeRangeContext excludeRange() {
		ExcludeRangeContext _localctx = new ExcludeRangeContext(Context, State);
		EnterRule(_localctx, 58, RULE_excludeRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(T__21);
			State = 350;
			Match(FLOAT);
			State = 351;
			Match(COMMA);
			State = 352;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		public MeterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterMeter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitMeter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeterContext meter() {
		MeterContext _localctx = new MeterContext(Context, State);
		EnterRule(_localctx, 60, RULE_meter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(T__22);
			State = 355;
			Match(STRING);
			State = 356;
			Match(COMMA);
			State = 357;
			Match(FLOAT);
			State = 358;
			Match(COMMA);
			State = 359;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public AnimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anim; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimContext anim() {
		AnimContext _localctx = new AnimContext(Context, State);
		EnterRule(_localctx, 62, RULE_anim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(T__23);
			State = 362;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopAnimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public LoopAnimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopAnim; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterLoopAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitLoopAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopAnim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopAnimContext loopAnim() {
		LoopAnimContext _localctx = new LoopAnimContext(Context, State);
		EnterRule(_localctx, 64, RULE_loopAnim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(T__24);
			State = 365;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveAnimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public MoveAnimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveAnim; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterMoveAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitMoveAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveAnim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveAnimContext moveAnim() {
		MoveAnimContext _localctx = new MoveAnimContext(Context, State);
		EnterRule(_localctx, 66, RULE_moveAnim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(T__25);
			State = 368;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefendAnimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public DefendAnimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defendAnim; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterDefendAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitDefendAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefendAnim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefendAnimContext defendAnim() {
		DefendAnimContext _localctx = new DefendAnimContext(Context, State);
		EnterRule(_localctx, 68, RULE_defendAnim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(T__26);
			State = 371;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowAnimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public LowAnimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowAnim; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterLowAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitLowAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowAnim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowAnimContext lowAnim() {
		LowAnimContext _localctx = new LowAnimContext(Context, State);
		EnterRule(_localctx, 70, RULE_lowAnim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(T__27);
			State = 374;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeAnimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public ChargeAnimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeAnim; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterChargeAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitChargeAnim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeAnim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeAnimContext chargeAnim() {
		ChargeAnimContext _localctx = new ChargeAnimContext(Context, State);
		EnterRule(_localctx, 72, RULE_chargeAnim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(T__28);
			State = 377;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public AnimTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAnimTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAnimTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimTimeContext animTime() {
		AnimTimeContext _localctx = new AnimTimeContext(Context, State);
		EnterRule(_localctx, 74, RULE_animTime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(T__29);
			State = 380;
			Match(STRING);
			State = 381;
			Match(COMMA);
			State = 382;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimStartFrameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public AnimStartFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animStartFrame; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAnimStartFrame(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAnimStartFrame(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimStartFrame(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimStartFrameContext animStartFrame() {
		AnimStartFrameContext _localctx = new AnimStartFrameContext(Context, State);
		EnterRule(_localctx, 76, RULE_animStartFrame);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(T__30);
			State = 385;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public FxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fx; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterFx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitFx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxContext fx() {
		FxContext _localctx = new FxContext(Context, State);
		EnterRule(_localctx, 78, RULE_fx);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(T__31);
			State = 388;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxSwingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public FxSwingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fxSwing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterFxSwing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitFxSwing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFxSwing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxSwingContext fxSwing() {
		FxSwingContext _localctx = new FxSwingContext(Context, State);
		EnterRule(_localctx, 80, RULE_fxSwing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(T__32);
			State = 391;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxCTAGContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public FxCTAGContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fxCTAG; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterFxCTAG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitFxCTAG(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFxCTAG(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxCTAGContext fxCTAG() {
		FxCTAGContext _localctx = new FxCTAGContext(Context, State);
		EnterRule(_localctx, 82, RULE_fxCTAG);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(T__33);
			State = 394;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxProjectileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public FxProjectileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fxProjectile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterFxProjectile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitFxProjectile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFxProjectile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxProjectileContext fxProjectile() {
		FxProjectileContext _localctx = new FxProjectileContext(Context, State);
		EnterRule(_localctx, 84, RULE_fxProjectile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(T__34);
			State = 397;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProjectileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AttackSkillParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AttackSkillParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public ProjectileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_projectile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterProjectile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitProjectile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProjectile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProjectileContext projectile() {
		ProjectileContext _localctx = new ProjectileContext(Context, State);
		EnterRule(_localctx, 86, RULE_projectile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(T__35);
			State = 400;
			Match(STRING);
			State = 401;
			Match(COMMA);
			State = 402;
			Match(STRING);
			State = 403;
			Match(COMMA);
			State = 404;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProjectileSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AttackSkillParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AttackSkillParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public ProjectileSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_projectileSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterProjectileSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitProjectileSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProjectileSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProjectileSequenceContext projectileSequence() {
		ProjectileSequenceContext _localctx = new ProjectileSequenceContext(Context, State);
		EnterRule(_localctx, 88, RULE_projectileSequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(T__36);
			State = 407;
			Match(STRING);
			State = 408;
			Match(COMMA);
			State = 409;
			Match(STRING);
			State = 410;
			Match(COMMA);
			State = 411;
			Match(STRING);
			State = 412;
			Match(COMMA);
			State = 413;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProjectileRotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		public ProjectileRotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_projectileRotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterProjectileRotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitProjectileRotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProjectileRotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProjectileRotationContext projectileRotation() {
		ProjectileRotationContext _localctx = new ProjectileRotationContext(Context, State);
		EnterRule(_localctx, 90, RULE_projectileRotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(T__37);
			State = 416;
			Match(FLOAT);
			State = 417;
			Match(COMMA);
			State = 418;
			Match(FLOAT);
			State = 419;
			Match(COMMA);
			State = 420;
			Match(FLOAT);
			State = 421;
			Match(COMMA);
			State = 422;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProjectileAttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public ProjectileAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_projectileAttr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterProjectileAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitProjectileAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProjectileAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProjectileAttrContext projectileAttr() {
		ProjectileAttrContext _localctx = new ProjectileAttrContext(Context, State);
		EnterRule(_localctx, 92, RULE_projectileAttr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(T__38);
			State = 425;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		public StatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_status; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusContext status() {
		StatusContext _localctx = new StatusContext(Context, State);
		EnterRule(_localctx, 94, RULE_status);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			_la = TokenStream.LA(1);
			if ( !(_la==T__39 || _la==T__40) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 428;
			Match(STRING);
			State = 429;
			Match(COMMA);
			State = 430;
			Match(FLOAT);
			State = 431;
			Match(COMMA);
			State = 432;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusDurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public StatusDurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusDuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusDurationContext statusDuration() {
		StatusDurationContext _localctx = new StatusDurationContext(Context, State);
		EnterRule(_localctx, 96, RULE_statusDuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			_la = TokenStream.LA(1);
			if ( !(_la==T__41 || _la==T__42) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 435;
			Match(STRING);
			State = 436;
			Match(COMMA);
			State = 437;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AttackSkillParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AttackSkillParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public StatusTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusTargetContext statusTarget() {
		StatusTargetContext _localctx = new StatusTargetContext(Context, State);
		EnterRule(_localctx, 98, RULE_statusTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.LA(1);
			if ( !(_la==T__43 || _la==T__44) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 440;
			Match(STRING);
			State = 441;
			Match(COMMA);
			State = 442;
			Match(FLOAT);
			State = 443;
			Match(COMMA);
			State = 444;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusSituationAffinityConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public StatusSituationAffinityConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusSituationAffinityCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusSituationAffinityCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusSituationAffinityCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusSituationAffinityCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusSituationAffinityConditionContext statusSituationAffinityCondition() {
		StatusSituationAffinityConditionContext _localctx = new StatusSituationAffinityConditionContext(Context, State);
		EnterRule(_localctx, 100, RULE_statusSituationAffinityCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_la = TokenStream.LA(1);
			if ( !(_la==T__45 || _la==T__46) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 447;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusChanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public StatusChanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusChance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusChance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusChance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusChance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusChanceContext statusChance() {
		StatusChanceContext _localctx = new StatusChanceContext(Context, State);
		EnterRule(_localctx, 102, RULE_statusChance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			_la = TokenStream.LA(1);
			if ( !(_la==T__47 || _la==T__48) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 450;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectStatusCondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public EffectStatusCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectStatusCond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterEffectStatusCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitEffectStatusCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectStatusCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectStatusCondContext effectStatusCond() {
		EffectStatusCondContext _localctx = new EffectStatusCondContext(Context, State);
		EnterRule(_localctx, 104, RULE_effectStatusCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(T__49);
			State = 453;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusIntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public StatusIntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusInterval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusIntervalContext statusInterval() {
		StatusIntervalContext _localctx = new StatusIntervalContext(Context, State);
		EnterRule(_localctx, 106, RULE_statusInterval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			_la = TokenStream.LA(1);
			if ( !(_la==T__50 || _la==T__51) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 456;
			Match(STRING);
			State = 457;
			Match(COMMA);
			State = 458;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public StatusConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusConditionContext statusCondition() {
		StatusConditionContext _localctx = new StatusConditionContext(Context, State);
		EnterRule(_localctx, 108, RULE_statusCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = TokenStream.LA(1);
			if ( !(_la==T__52 || _la==T__53) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 461;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillStatusSituationUnitConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public SkillStatusSituationUnitConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillStatusSituationUnitCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSkillStatusSituationUnitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSkillStatusSituationUnitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillStatusSituationUnitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillStatusSituationUnitConditionContext skillStatusSituationUnitCondition() {
		SkillStatusSituationUnitConditionContext _localctx = new SkillStatusSituationUnitConditionContext(Context, State);
		EnterRule(_localctx, 110, RULE_skillStatusSituationUnitCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_la = TokenStream.LA(1);
			if ( !(_la==T__54 || _la==T__55) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 464;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillStatusSituationStatusConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public SkillStatusSituationStatusConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillStatusSituationStatusCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSkillStatusSituationStatusCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSkillStatusSituationStatusCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillStatusSituationStatusCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillStatusSituationStatusConditionContext skillStatusSituationStatusCondition() {
		SkillStatusSituationStatusConditionContext _localctx = new SkillStatusSituationStatusConditionContext(Context, State);
		EnterRule(_localctx, 112, RULE_skillStatusSituationStatusCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			_la = TokenStream.LA(1);
			if ( !(_la==T__56 || _la==T__57) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 467;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimSpeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public AnimSpeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animSpeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterAnimSpeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitAnimSpeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimSpeed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimSpeedContext animSpeed() {
		AnimSpeedContext _localctx = new AnimSpeedContext(Context, State);
		EnterRule(_localctx, 114, RULE_animSpeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(T__58);
			State = 470;
			Match(STRING);
			State = 471;
			Match(COMMA);
			State = 472;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public TargetConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterTargetCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitTargetCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetConditionContext targetCondition() {
		TargetConditionContext _localctx = new TargetConditionContext(Context, State);
		EnterRule(_localctx, 116, RULE_targetCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(T__59);
			State = 475;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public EffectRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterEffectRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitEffectRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectRangeContext effectRange() {
		EffectRangeContext _localctx = new EffectRangeContext(Context, State);
		EnterRule(_localctx, 118, RULE_effectRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(T__60);
			State = 478;
			Match(FLOAT);
			State = 479;
			Match(COMMA);
			State = 480;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public EffectConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effectCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterEffectCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitEffectCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffectCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectConditionContext effectCondition() {
		EffectConditionContext _localctx = new EffectConditionContext(Context, State);
		EnterRule(_localctx, 120, RULE_effectCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(T__61);
			State = 483;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSkillContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public SubSkillContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSkill; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSubSkill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSubSkill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSkill(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSkillContext subSkill() {
		SubSkillContext _localctx = new SubSkillContext(Context, State);
		EnterRule(_localctx, 122, RULE_subSkill);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(T__62);
			State = 486;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProxyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AttackSkillParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AttackSkillParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		public ProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProxyContext proxy() {
		ProxyContext _localctx = new ProxyContext(Context, State);
		EnterRule(_localctx, 124, RULE_proxy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(T__63);
			State = 489;
			Match(STRING);
			State = 490;
			Match(COMMA);
			State = 491;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeaponReqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public WeaponReqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weaponReq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterWeaponReq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitWeaponReq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeaponReq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeaponReqContext weaponReq() {
		WeaponReqContext _localctx = new WeaponReqContext(Context, State);
		EnterRule(_localctx, 126, RULE_weaponReq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(T__64);
			State = 494;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComboButtonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public ComboButtonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comboButton; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterComboButton(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitComboButton(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComboButton(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComboButtonContext comboButton() {
		ComboButtonContext _localctx = new ComboButtonContext(Context, State);
		EnterRule(_localctx, 128, RULE_comboButton);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			Match(T__65);
			State = 497;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxProjectileImpactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public FxProjectileImpactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fxProjectileImpact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterFxProjectileImpact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitFxProjectileImpact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFxProjectileImpact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxProjectileImpactContext fxProjectileImpact() {
		FxProjectileImpactContext _localctx = new FxProjectileImpactContext(Context, State);
		EnterRule(_localctx, 130, RULE_fxProjectileImpact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(T__66);
			State = 500;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public SoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundContext sound() {
		SoundContext _localctx = new SoundContext(Context, State);
		EnterRule(_localctx, 132, RULE_sound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(T__67);
			State = 503;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillFreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public SkillFreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillFree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSkillFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSkillFree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillFree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillFreeContext skillFree() {
		SkillFreeContext _localctx = new SkillFreeContext(Context, State);
		EnterRule(_localctx, 134, RULE_skillFree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (T__68 - 69)) | (1L << (T__69 - 69)) | (1L << (T__70 - 69)) | (1L << (T__71 - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 506;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiHitDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public MultiHitDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiHitData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterMultiHitData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitMultiHitData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiHitData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiHitDataContext multiHitData() {
		MultiHitDataContext _localctx = new MultiHitDataContext(Context, State);
		EnterRule(_localctx, 136, RULE_multiHitData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(T__72);
			State = 509;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsabilityConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public UsabilityConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usabilityCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterUsabilityCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitUsabilityCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsabilityCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsabilityConditionContext usabilityCondition() {
		UsabilityConditionContext _localctx = new UsabilityConditionContext(Context, State);
		EnterRule(_localctx, 138, RULE_usabilityCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(T__73);
			State = 512;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummonDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AttackSkillParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AttackSkillParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AttackSkillParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AttackSkillParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public SummonDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summonData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterSummonData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitSummonData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSummonData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SummonDataContext summonData() {
		SummonDataContext _localctx = new SummonDataContext(Context, State);
		EnterRule(_localctx, 140, RULE_summonData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(T__74);
			State = 515;
			Match(STRING);
			State = 516;
			Match(COMMA);
			State = 517;
			Match(STRING);
			State = 518;
			Match(COMMA);
			State = 519;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public MoveRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterMoveRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitMoveRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveRangeContext moveRange() {
		MoveRangeContext _localctx = new MoveRangeContext(Context, State);
		EnterRule(_localctx, 142, RULE_moveRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(T__75);
			State = 522;
			Match(FLOAT);
			State = 523;
			Match(COMMA);
			State = 524;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveRangeConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public MoveRangeConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveRangeCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterMoveRangeCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitMoveRangeCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveRangeCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveRangeConditionContext moveRangeCondition() {
		MoveRangeConditionContext _localctx = new MoveRangeConditionContext(Context, State);
		EnterRule(_localctx, 144, RULE_moveRangeCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			Match(T__76);
			State = 527;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public ReplacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterReplaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitReplaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacesContext replaces() {
		ReplacesContext _localctx = new ReplacesContext(Context, State);
		EnterRule(_localctx, 146, RULE_replaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(T__77);
			State = 530;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusSituationSkillConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public StatusSituationSkillConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusSituationSkillCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusSituationSkillCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusSituationSkillCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusSituationSkillCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusSituationSkillConditionContext statusSituationSkillCondition() {
		StatusSituationSkillConditionContext _localctx = new StatusSituationSkillConditionContext(Context, State);
		EnterRule(_localctx, 148, RULE_statusSituationSkillCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(T__78);
			State = 533;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FxMoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AttackSkillParser.STRING, 0); }
		public FxMoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fxMove; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterFxMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitFxMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFxMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FxMoveContext fxMove() {
		FxMoveContext _localctx = new FxMoveContext(Context, State);
		EnterRule(_localctx, 150, RULE_fxMove);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(T__79);
			State = 536;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceDelayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(AttackSkillParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(AttackSkillParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AttackSkillParser.COMMA, 0); }
		public DistanceDelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distanceDelay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterDistanceDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitDistanceDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistanceDelay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceDelayContext distanceDelay() {
		DistanceDelayContext _localctx = new DistanceDelayContext(Context, State);
		EnterRule(_localctx, 152, RULE_distanceDelay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(T__80);
			State = 539;
			Match(FLOAT);
			State = 540;
			Match(COMMA);
			State = 541;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatusUseLimitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AttackSkillParser.FLOAT, 0); }
		public StatusUseLimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statusUseLimit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.EnterStatusUseLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAttackSkillListener typedListener = listener as IAttackSkillListener;
			if (typedListener != null) typedListener.ExitStatusUseLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAttackSkillVisitor<TResult> typedVisitor = visitor as IAttackSkillVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatusUseLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatusUseLimitContext statusUseLimit() {
		StatusUseLimitContext _localctx = new StatusUseLimitContext(Context, State);
		EnterRule(_localctx, 154, RULE_statusUseLimit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			Match(T__81);
			State = 544;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\\', '\x225', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\xA1', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\xA2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '\xAA', '\n', 
		'\x4', '\r', '\x4', '\xE', '\x4', '\xAB', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xD2', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\xDC', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xE5', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xF0', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xFC', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x102', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x2', '\x2', 'P', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x2', '\f', '\x3', '\x2', '*', '+', '\x3', '\x2', 
		',', '-', '\x3', '\x2', '.', '/', '\x3', '\x2', '\x30', '\x31', '\x3', 
		'\x2', '\x32', '\x33', '\x3', '\x2', '\x35', '\x36', '\x3', '\x2', '\x37', 
		'\x38', '\x3', '\x2', '\x39', ':', '\x3', '\x2', ';', '<', '\x3', '\x2', 
		'G', 'J', '\x2', '\x21C', '\x2', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\x6', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\xD1', '\x3', '\x2', '\x2', '\x2', '\n', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\x10', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x101', '\x3', '\x2', '\x2', '\x2', '\x14', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x113', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x116', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x119', '\x3', '\x2', '\x2', '\x2', '\"', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x124', '\x3', '\x2', '\x2', '\x2', '(', '\x137', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x13A', '\x3', '\x2', '\x2', '\x2', ',', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x149', '\x3', '\x2', '\x2', '\x2', '\x32', '\x14C', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x36', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x157', '\x3', '\x2', '\x2', '\x2', 
		':', '\x15A', '\x3', '\x2', '\x2', '\x2', '<', '\x15F', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x164', '\x3', '\x2', '\x2', '\x2', '@', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x171', '\x3', '\x2', '\x2', '\x2', '\x46', '\x174', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x177', '\x3', '\x2', '\x2', '\x2', 'J', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x182', '\x3', '\x2', '\x2', '\x2', 'P', '\x185', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x188', '\x3', '\x2', '\x2', '\x2', 'T', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x191', '\x3', '\x2', '\x2', '\x2', 'Z', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x1A1', '\x3', '\x2', '\x2', '\x2', '^', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1B9', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x1C0', '\x3', '\x2', '\x2', '\x2', 'h', '\x1C3', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x1C9', '\x3', '\x2', '\x2', '\x2', 'n', '\x1CE', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x1D1', '\x3', '\x2', '\x2', '\x2', 'r', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x1DC', '\x3', '\x2', '\x2', '\x2', 'x', '\x1DF', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x1E4', '\x3', '\x2', '\x2', '\x2', '|', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x82', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x86', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x201', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x204', '\x3', '\x2', '\x2', '\x2', '\x90', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x213', '\x3', '\x2', '\x2', '\x2', '\x96', '\x216', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x219', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\xA0', '\x5', '\x4', '\x3', '\x2', '\x9F', '\xA1', '\x5', '\x6', 
		'\x4', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '\x3', '\x2', '\x2', '\xA5', '\xA6', 
		'\a', 'W', '\x2', '\x2', '\xA6', '\x5', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA9', '\x5', '\x14', '\v', '\x2', '\xA8', '\xAA', '\x5', '\b', '\x5', 
		'\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xD2', '\x5', '\x16', '\f', '\x2', '\xAE', '\xD2', '\x5', 
		'\"', '\x12', '\x2', '\xAF', '\xD2', '\x5', '\x34', '\x1B', '\x2', '\xB0', 
		'\xD2', '\x5', '\x36', '\x1C', '\x2', '\xB1', '\xD2', '\x5', '\x38', '\x1D', 
		'\x2', '\xB2', '\xD2', '\x5', ':', '\x1E', '\x2', '\xB3', '\xD2', '\x5', 
		'\x8C', 'G', '\x2', '\xB4', '\xD2', '\x5', '<', '\x1F', '\x2', '\xB5', 
		'\xD2', '\x5', '\x8A', '\x46', '\x2', '\xB6', '\xD2', '\x5', 'v', '<', 
		'\x2', '\xB7', '\xD2', '\x5', '\x90', 'I', '\x2', '\xB8', '\xD2', '\x5', 
		'\x92', 'J', '\x2', '\xB9', '\xD2', '\x5', '\x8E', 'H', '\x2', '\xBA', 
		'\xD2', '\x5', '~', '@', '\x2', '\xBB', '\xD2', '\x5', '|', '?', '\x2', 
		'\xBC', '\xD2', '\x5', '>', ' ', '\x2', '\xBD', '\xD2', '\x5', '\x82', 
		'\x42', '\x2', '\xBE', '\xD2', '\x5', 't', ';', '\x2', '\xBF', '\xD2', 
		'\x5', '\n', '\x6', '\x2', '\xC0', '\xD2', '\x5', '\f', '\a', '\x2', '\xC1', 
		'\xD2', '\x5', '\x9A', 'N', '\x2', '\xC2', '\xD2', '\x5', '\xE', '\b', 
		'\x2', '\xC3', '\xD2', '\x5', '\x12', '\n', '\x2', '\xC4', '\xD2', '\x5', 
		'\x10', '\t', '\x2', '\xC5', '\xD2', '\x5', '&', '\x14', '\x2', '\xC6', 
		'\xD2', '\x5', '\x88', '\x45', '\x2', '\xC7', '\xD2', '\x5', '$', '\x13', 
		'\x2', '\xC8', '\xD2', '\x5', '(', '\x15', '\x2', '\xC9', '\xD2', '\x5', 
		' ', '\x11', '\x2', '\xCA', '\xD2', '\x5', '\x1E', '\x10', '\x2', '\xCB', 
		'\xD2', '\x5', '\x1C', '\xF', '\x2', '\xCC', '\xD2', '\x5', '\x1A', '\xE', 
		'\x2', '\xCD', '\xD2', '\x5', '\x18', '\r', '\x2', '\xCE', '\xD2', '\x5', 
		'\x80', '\x41', '\x2', '\xCF', '\xD2', '\x5', '\x94', 'K', '\x2', '\xD0', 
		'\xD2', '\x5', '\x9C', 'O', '\x2', '\xD1', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\t', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xDC', '\x5', 
		'L', '\'', '\x2', '\xD4', '\xDC', '\x5', 'N', '(', '\x2', '\xD5', '\xDC', 
		'\x5', '@', '!', '\x2', '\xD6', '\xDC', '\x5', '\x42', '\"', '\x2', '\xD7', 
		'\xDC', '\x5', '\x44', '#', '\x2', '\xD8', '\xDC', '\x5', '\x46', '$', 
		'\x2', '\xD9', '\xDC', '\x5', 'H', '%', '\x2', '\xDA', '\xDC', '\x5', 
		'J', '&', '\x2', '\xDB', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\v', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE5', '\x5', 'P', 
		')', '\x2', '\xDE', '\xE5', '\x5', 'R', '*', '\x2', '\xDF', '\xE5', '\x5', 
		'\x86', '\x44', '\x2', '\xE0', '\xE5', '\x5', 'T', '+', '\x2', '\xE1', 
		'\xE5', '\x5', 'V', ',', '\x2', '\xE2', '\xE5', '\x5', '\x84', '\x43', 
		'\x2', '\xE3', '\xE5', '\x5', '\x98', 'M', '\x2', '\xE4', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xF0', '\x5', '*', '\x16', 
		'\x2', '\xE7', '\xF0', '\x5', '\x32', '\x1A', '\x2', '\xE8', '\xF0', '\x5', 
		'x', '=', '\x2', '\xE9', '\xF0', '\x5', '.', '\x18', '\x2', '\xEA', '\xF0', 
		'\x5', '\x30', '\x19', '\x2', '\xEB', '\xF0', '\x5', ',', '\x17', '\x2', 
		'\xEC', '\xF0', '\x5', 'z', '>', '\x2', '\xED', '\xF0', '\x5', '\x30', 
		'\x19', '\x2', '\xEE', '\xF0', '\x5', 'j', '\x36', '\x2', '\xEF', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xFC', 
		'\x5', '`', '\x31', '\x2', '\xF2', '\xFC', '\x5', '\x62', '\x32', '\x2', 
		'\xF3', '\xFC', '\x5', 'r', ':', '\x2', '\xF4', '\xFC', '\x5', 'l', '\x37', 
		'\x2', '\xF5', '\xFC', '\x5', '\x64', '\x33', '\x2', '\xF6', '\xFC', '\x5', 
		'\x66', '\x34', '\x2', '\xF7', '\xFC', '\x5', 'p', '\x39', '\x2', '\xF8', 
		'\xFC', '\x5', 'h', '\x35', '\x2', '\xF9', '\xFC', '\x5', 'n', '\x38', 
		'\x2', '\xFA', '\xFC', '\x5', '\x96', 'L', '\x2', '\xFB', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\x102', '\x5', 'X', '-', '\x2', '\xFE', 
		'\x102', '\x5', 'Z', '.', '\x2', '\xFF', '\x102', '\x5', '^', '\x30', 
		'\x2', '\x100', '\x102', '\x5', '\\', '/', '\x2', '\x101', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x13', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\a', '\x4', '\x2', '\x2', '\x104', '\x105', '\a', '[', '\x2', '\x2', 
		'\x105', '\x106', '\a', 'Z', '\x2', '\x2', '\x106', '\x107', '\a', '[', 
		'\x2', '\x2', '\x107', '\x108', '\a', 'Z', '\x2', '\x2', '\x108', '\x109', 
		'\a', '[', '\x2', '\x2', '\x109', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\a', '\x5', '\x2', '\x2', '\x10B', '\x10C', '\a', '[', 
		'\x2', '\x2', '\x10C', '\x17', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\a', '\x6', '\x2', '\x2', '\x10E', '\x10F', '\a', 'W', '\x2', '\x2', 
		'\x10F', '\x19', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\a', 
		'\x2', '\x2', '\x111', '\x112', '\a', 'W', '\x2', '\x2', '\x112', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\a', '\b', '\x2', '\x2', 
		'\x114', '\x115', '\a', 'W', '\x2', '\x2', '\x115', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x116', '\x117', '\a', '\t', '\x2', '\x2', '\x117', '\x118', 
		'\a', 'W', '\x2', '\x2', '\x118', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\a', '\n', '\x2', '\x2', '\x11A', '\x11B', '\a', '[', 
		'\x2', '\x2', '\x11B', '!', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', 
		'\a', '\v', '\x2', '\x2', '\x11D', '\x11E', '\a', '[', '\x2', '\x2', '\x11E', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '\f', '\x2', 
		'\x2', '\x120', '\x121', '\a', 'W', '\x2', '\x2', '\x121', '\x122', '\a', 
		'Z', '\x2', '\x2', '\x122', '\x123', '\a', 'W', '\x2', '\x2', '\x123', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\a', '\r', '\x2', 
		'\x2', '\x125', '\x126', '\a', '[', '\x2', '\x2', '\x126', '\x127', '\a', 
		'Z', '\x2', '\x2', '\x127', '\x128', '\a', '[', '\x2', '\x2', '\x128', 
		'\x129', '\a', 'Z', '\x2', '\x2', '\x129', '\x12A', '\a', 'W', '\x2', 
		'\x2', '\x12A', '\x12B', '\a', 'Z', '\x2', '\x2', '\x12B', '\x12C', '\a', 
		'W', '\x2', '\x2', '\x12C', '\x12D', '\a', 'Z', '\x2', '\x2', '\x12D', 
		'\x12E', '\a', 'W', '\x2', '\x2', '\x12E', '\x12F', '\a', 'Z', '\x2', 
		'\x2', '\x12F', '\x130', '\a', 'W', '\x2', '\x2', '\x130', '\x131', '\a', 
		'Z', '\x2', '\x2', '\x131', '\x132', '\a', 'W', '\x2', '\x2', '\x132', 
		'\x133', '\a', 'Z', '\x2', '\x2', '\x133', '\x134', '\a', 'W', '\x2', 
		'\x2', '\x134', '\x135', '\a', 'Z', '\x2', '\x2', '\x135', '\x136', '\a', 
		'W', '\x2', '\x2', '\x136', '\'', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x138', '\a', '\xE', '\x2', '\x2', '\x138', '\x139', '\a', 'W', '\x2', 
		'\x2', '\x139', ')', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', 
		'\xF', '\x2', '\x2', '\x13B', '\x13C', '\a', '[', '\x2', '\x2', '\x13C', 
		'\x13D', '\a', 'Z', '\x2', '\x2', '\x13D', '\x13E', '\a', 'W', '\x2', 
		'\x2', '\x13E', '\x13F', '\a', 'Z', '\x2', '\x2', '\x13F', '\x140', '\a', 
		'W', '\x2', '\x2', '\x140', '+', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\a', '\x10', '\x2', '\x2', '\x142', '\x143', '\a', '[', '\x2', 
		'\x2', '\x143', '-', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\a', 
		'\x11', '\x2', '\x2', '\x145', '\x146', '\a', '[', '\x2', '\x2', '\x146', 
		'\x147', '\a', 'Z', '\x2', '\x2', '\x147', '\x148', '\a', 'W', '\x2', 
		'\x2', '\x148', '/', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\a', 
		'\x12', '\x2', '\x2', '\x14A', '\x14B', '\a', '[', '\x2', '\x2', '\x14B', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', '\x13', '\x2', 
		'\x2', '\x14D', '\x14E', '\a', '[', '\x2', '\x2', '\x14E', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\a', '\x14', '\x2', '\x2', '\x150', 
		'\x151', '\a', 'W', '\x2', '\x2', '\x151', '\x152', '\a', 'Z', '\x2', 
		'\x2', '\x152', '\x153', '\a', 'W', '\x2', '\x2', '\x153', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x155', '\a', '\x15', '\x2', '\x2', '\x155', 
		'\x156', '\a', 'W', '\x2', '\x2', '\x156', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x158', '\a', '\x16', '\x2', '\x2', '\x158', '\x159', 
		'\a', '[', '\x2', '\x2', '\x159', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15B', '\a', '\x17', '\x2', '\x2', '\x15B', '\x15C', '\a', 
		'W', '\x2', '\x2', '\x15C', '\x15D', '\a', 'Z', '\x2', '\x2', '\x15D', 
		'\x15E', '\a', '[', '\x2', '\x2', '\x15E', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\a', '\x18', '\x2', '\x2', '\x160', '\x161', '\a', 
		'W', '\x2', '\x2', '\x161', '\x162', '\a', 'Z', '\x2', '\x2', '\x162', 
		'\x163', '\a', '[', '\x2', '\x2', '\x163', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\x19', '\x2', '\x2', '\x165', '\x166', '\a', 
		'[', '\x2', '\x2', '\x166', '\x167', '\a', 'Z', '\x2', '\x2', '\x167', 
		'\x168', '\a', 'W', '\x2', '\x2', '\x168', '\x169', '\a', 'Z', '\x2', 
		'\x2', '\x169', '\x16A', '\a', 'W', '\x2', '\x2', '\x16A', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x16C', '\a', '\x1A', '\x2', '\x2', '\x16C', 
		'\x16D', '\a', '[', '\x2', '\x2', '\x16D', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16F', '\a', '\x1B', '\x2', '\x2', '\x16F', '\x170', 
		'\a', '[', '\x2', '\x2', '\x170', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x172', '\a', '\x1C', '\x2', '\x2', '\x172', '\x173', '\a', 
		'[', '\x2', '\x2', '\x173', '\x45', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x175', '\a', '\x1D', '\x2', '\x2', '\x175', '\x176', '\a', '[', '\x2', 
		'\x2', '\x176', 'G', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\a', 
		'\x1E', '\x2', '\x2', '\x178', '\x179', '\a', '[', '\x2', '\x2', '\x179', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\a', '\x1F', '\x2', 
		'\x2', '\x17B', '\x17C', '\a', '[', '\x2', '\x2', '\x17C', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17E', '\a', ' ', '\x2', '\x2', '\x17E', 
		'\x17F', '\a', '[', '\x2', '\x2', '\x17F', '\x180', '\a', 'Z', '\x2', 
		'\x2', '\x180', '\x181', '\a', 'W', '\x2', '\x2', '\x181', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x183', '\a', '!', '\x2', '\x2', '\x183', 
		'\x184', '\a', 'W', '\x2', '\x2', '\x184', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\a', '\"', '\x2', '\x2', '\x186', '\x187', '\a', '[', 
		'\x2', '\x2', '\x187', 'Q', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', 
		'\a', '#', '\x2', '\x2', '\x189', '\x18A', '\a', '[', '\x2', '\x2', '\x18A', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\a', '$', '\x2', '\x2', 
		'\x18C', '\x18D', '\a', '[', '\x2', '\x2', '\x18D', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x18E', '\x18F', '\a', '%', '\x2', '\x2', '\x18F', '\x190', 
		'\a', '[', '\x2', '\x2', '\x190', 'W', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x192', '\a', '&', '\x2', '\x2', '\x192', '\x193', '\a', '[', '\x2', 
		'\x2', '\x193', '\x194', '\a', 'Z', '\x2', '\x2', '\x194', '\x195', '\a', 
		'[', '\x2', '\x2', '\x195', '\x196', '\a', 'Z', '\x2', '\x2', '\x196', 
		'\x197', '\a', 'W', '\x2', '\x2', '\x197', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x199', '\a', '\'', '\x2', '\x2', '\x199', '\x19A', '\a', '[', 
		'\x2', '\x2', '\x19A', '\x19B', '\a', 'Z', '\x2', '\x2', '\x19B', '\x19C', 
		'\a', '[', '\x2', '\x2', '\x19C', '\x19D', '\a', 'Z', '\x2', '\x2', '\x19D', 
		'\x19E', '\a', '[', '\x2', '\x2', '\x19E', '\x19F', '\a', 'Z', '\x2', 
		'\x2', '\x19F', '\x1A0', '\a', 'W', '\x2', '\x2', '\x1A0', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '(', '\x2', '\x2', '\x1A2', 
		'\x1A3', '\a', 'W', '\x2', '\x2', '\x1A3', '\x1A4', '\a', 'Z', '\x2', 
		'\x2', '\x1A4', '\x1A5', '\a', 'W', '\x2', '\x2', '\x1A5', '\x1A6', '\a', 
		'Z', '\x2', '\x2', '\x1A6', '\x1A7', '\a', 'W', '\x2', '\x2', '\x1A7', 
		'\x1A8', '\a', 'Z', '\x2', '\x2', '\x1A8', '\x1A9', '\a', 'W', '\x2', 
		'\x2', '\x1A9', ']', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 
		')', '\x2', '\x2', '\x1AB', '\x1AC', '\a', '[', '\x2', '\x2', '\x1AC', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\t', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\a', '[', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 
		'Z', '\x2', '\x2', '\x1B0', '\x1B1', '\a', 'W', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\a', 'Z', '\x2', '\x2', '\x1B2', '\x1B3', '\a', 'W', '\x2', 
		'\x2', '\x1B3', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', 
		'\t', '\x3', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '[', '\x2', '\x2', 
		'\x1B6', '\x1B7', '\a', 'Z', '\x2', '\x2', '\x1B7', '\x1B8', '\a', 'W', 
		'\x2', '\x2', '\x1B8', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', 
		'\t', '\x4', '\x2', '\x2', '\x1BA', '\x1BB', '\a', '[', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\a', 'Z', '\x2', '\x2', '\x1BC', '\x1BD', '\a', 'W', 
		'\x2', '\x2', '\x1BD', '\x1BE', '\a', 'Z', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\a', '[', '\x2', '\x2', '\x1BF', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\t', '\x5', '\x2', '\x2', '\x1C1', '\x1C2', '\a', '[', 
		'\x2', '\x2', '\x1C2', 'g', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\t', '\x6', '\x2', '\x2', '\x1C4', '\x1C5', '\a', 'W', '\x2', '\x2', 
		'\x1C5', 'i', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\a', '\x34', 
		'\x2', '\x2', '\x1C7', '\x1C8', '\a', '[', '\x2', '\x2', '\x1C8', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\t', '\a', '\x2', '\x2', 
		'\x1CA', '\x1CB', '\a', '[', '\x2', '\x2', '\x1CB', '\x1CC', '\a', 'Z', 
		'\x2', '\x2', '\x1CC', '\x1CD', '\a', 'W', '\x2', '\x2', '\x1CD', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\t', '\b', '\x2', '\x2', 
		'\x1CF', '\x1D0', '\a', '[', '\x2', '\x2', '\x1D0', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1D2', '\t', '\t', '\x2', '\x2', '\x1D2', '\x1D3', 
		'\a', '[', '\x2', '\x2', '\x1D3', 'q', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\x1D5', '\t', '\n', '\x2', '\x2', '\x1D5', '\x1D6', '\a', '[', '\x2', 
		'\x2', '\x1D6', 's', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\a', 
		'=', '\x2', '\x2', '\x1D8', '\x1D9', '\a', '[', '\x2', '\x2', '\x1D9', 
		'\x1DA', '\a', 'Z', '\x2', '\x2', '\x1DA', '\x1DB', '\a', 'W', '\x2', 
		'\x2', '\x1DB', 'u', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\a', 
		'>', '\x2', '\x2', '\x1DD', '\x1DE', '\a', '[', '\x2', '\x2', '\x1DE', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '?', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\a', 'W', '\x2', '\x2', '\x1E1', '\x1E2', '\a', 'Z', 
		'\x2', '\x2', '\x1E2', '\x1E3', '\a', '[', '\x2', '\x2', '\x1E3', 'y', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\a', '@', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\a', '[', '\x2', '\x2', '\x1E6', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x41', '\x2', '\x2', '\x1E8', '\x1E9', 
		'\a', '[', '\x2', '\x2', '\x1E9', '}', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1EB', '\a', '\x42', '\x2', '\x2', '\x1EB', '\x1EC', '\a', '[', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\a', 'Z', '\x2', '\x2', '\x1ED', '\x1EE', '\a', 
		'[', '\x2', '\x2', '\x1EE', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x1F0', '\a', '\x43', '\x2', '\x2', '\x1F0', '\x1F1', '\a', '[', '\x2', 
		'\x2', '\x1F1', '\x81', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', 
		'\a', '\x44', '\x2', '\x2', '\x1F3', '\x1F4', '\a', '[', '\x2', '\x2', 
		'\x1F4', '\x83', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\a', '\x45', 
		'\x2', '\x2', '\x1F6', '\x1F7', '\a', '[', '\x2', '\x2', '\x1F7', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '\x46', '\x2', '\x2', 
		'\x1F9', '\x1FA', '\a', '[', '\x2', '\x2', '\x1FA', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB', '\x1FC', '\t', '\v', '\x2', '\x2', '\x1FC', '\x1FD', 
		'\a', '[', '\x2', '\x2', '\x1FD', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\a', 'K', '\x2', '\x2', '\x1FF', '\x200', '\a', '[', 
		'\x2', '\x2', '\x200', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', 
		'\a', 'L', '\x2', '\x2', '\x202', '\x203', '\a', '[', '\x2', '\x2', '\x203', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\a', 'M', '\x2', 
		'\x2', '\x205', '\x206', '\a', '[', '\x2', '\x2', '\x206', '\x207', '\a', 
		'Z', '\x2', '\x2', '\x207', '\x208', '\a', '[', '\x2', '\x2', '\x208', 
		'\x209', '\a', 'Z', '\x2', '\x2', '\x209', '\x20A', '\a', 'W', '\x2', 
		'\x2', '\x20A', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', 
		'\a', 'N', '\x2', '\x2', '\x20C', '\x20D', '\a', 'W', '\x2', '\x2', '\x20D', 
		'\x20E', '\a', 'Z', '\x2', '\x2', '\x20E', '\x20F', '\a', '[', '\x2', 
		'\x2', '\x20F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', 
		'\a', 'O', '\x2', '\x2', '\x211', '\x212', '\a', '[', '\x2', '\x2', '\x212', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\a', 'P', '\x2', 
		'\x2', '\x214', '\x215', '\a', '[', '\x2', '\x2', '\x215', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x216', '\x217', '\a', 'Q', '\x2', '\x2', '\x217', 
		'\x218', '\a', '[', '\x2', '\x2', '\x218', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x21A', '\a', 'R', '\x2', '\x2', '\x21A', '\x21B', '\a', 
		'[', '\x2', '\x2', '\x21B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x21D', '\a', 'S', '\x2', '\x2', '\x21D', '\x21E', '\a', 'W', '\x2', 
		'\x2', '\x21E', '\x21F', '\a', 'Z', '\x2', '\x2', '\x21F', '\x220', '\a', 
		'W', '\x2', '\x2', '\x220', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x221', 
		'\x222', '\a', 'T', '\x2', '\x2', '\x222', '\x223', '\a', 'W', '\x2', 
		'\x2', '\x223', '\x9D', '\x3', '\x2', '\x2', '\x2', '\n', '\xA2', '\xAB', 
		'\xD1', '\xDB', '\xE4', '\xEF', '\xFB', '\x101',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
