//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusJournal.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusJournalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, ID=24, WS=25, 
		INT=26, FLOAT=27, OBR=28, CBR=29, COMMA=30, STRING=31, SINGLELINE_COMMENT=32;
	public const int
		RULE_root = 0, RULE_rumour = 1, RULE_conversation = 2, RULE_minDays = 3, 
		RULE_ursulaChoice = 4, RULE_valensChoice = 5, RULE_journalTitle = 6, RULE_journalText = 7, 
		RULE_shop = 8, RULE_gossip = 9, RULE_minLevel = 10, RULE_quest = 11, RULE_prize = 12, 
		RULE_success = 13, RULE_failure = 14, RULE_type = 15, RULE_encounter = 16, 
		RULE_onetime = 17, RULE_lastDay = 18, RULE_relativeDay = 19, RULE_item = 20, 
		RULE_yank = 21, RULE_location = 22;
	public static readonly string[] ruleNames = {
		"root", "rumour", "conversation", "minDays", "ursulaChoice", "valensChoice", 
		"journalTitle", "journalText", "shop", "gossip", "minLevel", "quest", 
		"prize", "success", "failure", "type", "encounter", "onetime", "lastDay", 
		"relativeDay", "item", "yank", "location"
	};

	private static readonly string[] _LiteralNames = {
		null, "'RUMOR'", "'CONVERSATION'", "'MINDAYS'", "'URSULACHOICE'", "'VALENSCHOICE'", 
		"'JOURNALTITLE'", "'JOURNALTEXT'", "'Shop'", "'SHOP'", "'GOSSIP'", "'MINLEVEL'", 
		"'QUEST'", "'PRIZE'", "'SUCCESS'", "'FAILURE'", "'TYPE'", "'ENCOUNTER'", 
		"'ONETIME'", "'LASTDAY'", "'RELATIVEDAY'", "'ITEM'", "'YANK'", "'LOCATION'", 
		null, null, null, null, "'{'", "'}'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"ID", "WS", "INT", "FLOAT", "OBR", "CBR", "COMMA", "STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusJournal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusJournalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusJournalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusJournalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RumourContext[] rumour() {
			return GetRuleContexts<RumourContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RumourContext rumour(int i) {
			return GetRuleContext<RumourContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GossipContext[] gossip() {
			return GetRuleContexts<GossipContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GossipContext gossip(int i) {
			return GetRuleContext<GossipContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuestContext[] quest() {
			return GetRuleContexts<QuestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuestContext quest(int i) {
			return GetRuleContext<QuestContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 49;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 46;
					rumour();
					}
					break;
				case T__9:
					{
					State = 47;
					gossip();
					}
					break;
				case T__11:
					{
					State = 48;
					quest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << T__11))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RumourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConversationContext conversation() {
			return GetRuleContext<ConversationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinDaysContext minDays() {
			return GetRuleContext<MinDaysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrsulaChoiceContext ursulaChoice() {
			return GetRuleContext<UrsulaChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValensChoiceContext valensChoice() {
			return GetRuleContext<ValensChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JournalTitleContext journalTitle() {
			return GetRuleContext<JournalTitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JournalTextContext journalText() {
			return GetRuleContext<JournalTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShopContext[] shop() {
			return GetRuleContexts<ShopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShopContext shop(int i) {
			return GetRuleContext<ShopContext>(i);
		}
		public RumourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rumour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterRumour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitRumour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRumour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RumourContext rumour() {
		RumourContext _localctx = new RumourContext(Context, State);
		EnterRule(_localctx, 2, RULE_rumour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(T__0);
			State = 54;
			Match(STRING);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 55;
				conversation();
				}
			}

			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 58;
				minDays();
				}
			}

			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 61;
				ursulaChoice();
				}
			}

			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 64;
				valensChoice();
				}
			}

			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 67;
				journalTitle();
				}
			}

			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 70;
				journalText();
				}
			}

			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7 || _la==T__8) {
				{
				{
				State = 73;
				shop();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public ConversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterConversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitConversation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversationContext conversation() {
		ConversationContext _localctx = new ConversationContext(Context, State);
		EnterRule(_localctx, 4, RULE_conversation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(T__1);
			State = 80;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinDaysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public MinDaysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minDays; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterMinDays(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitMinDays(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinDays(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinDaysContext minDays() {
		MinDaysContext _localctx = new MinDaysContext(Context, State);
		EnterRule(_localctx, 6, RULE_minDays);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__2);
			State = 83;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrsulaChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public UrsulaChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ursulaChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterUrsulaChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitUrsulaChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrsulaChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrsulaChoiceContext ursulaChoice() {
		UrsulaChoiceContext _localctx = new UrsulaChoiceContext(Context, State);
		EnterRule(_localctx, 8, RULE_ursulaChoice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__3);
			State = 86;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValensChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public ValensChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valensChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterValensChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitValensChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValensChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValensChoiceContext valensChoice() {
		ValensChoiceContext _localctx = new ValensChoiceContext(Context, State);
		EnterRule(_localctx, 10, RULE_valensChoice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__4);
			State = 89;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JournalTitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public JournalTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_journalTitle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterJournalTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitJournalTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJournalTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JournalTitleContext journalTitle() {
		JournalTitleContext _localctx = new JournalTitleContext(Context, State);
		EnterRule(_localctx, 12, RULE_journalTitle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__5);
			State = 92;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JournalTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public JournalTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_journalText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterJournalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitJournalText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJournalText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JournalTextContext journalText() {
		JournalTextContext _localctx = new JournalTextContext(Context, State);
		EnterRule(_localctx, 14, RULE_journalText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__6);
			State = 95;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public ShopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterShop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitShop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShopContext shop() {
		ShopContext _localctx = new ShopContext(Context, State);
		EnterRule(_localctx, 16, RULE_shop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 98;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GossipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConversationContext conversation() {
			return GetRuleContext<ConversationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrsulaChoiceContext ursulaChoice() {
			return GetRuleContext<UrsulaChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValensChoiceContext valensChoice() {
			return GetRuleContext<ValensChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinLevelContext minLevel() {
			return GetRuleContext<MinLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinDaysContext minDays() {
			return GetRuleContext<MinDaysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JournalTitleContext journalTitle() {
			return GetRuleContext<JournalTitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JournalTextContext journalText() {
			return GetRuleContext<JournalTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShopContext[] shop() {
			return GetRuleContexts<ShopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShopContext shop(int i) {
			return GetRuleContext<ShopContext>(i);
		}
		public GossipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gossip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterGossip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitGossip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGossip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GossipContext gossip() {
		GossipContext _localctx = new GossipContext(Context, State);
		EnterRule(_localctx, 18, RULE_gossip);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__9);
			State = 101;
			Match(STRING);
			State = 102;
			conversation();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 103;
				minLevel();
				}
			}

			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 106;
				minDays();
				}
			}

			State = 109;
			ursulaChoice();
			State = 110;
			valensChoice();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 111;
				journalTitle();
				}
			}

			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 114;
				journalText();
				}
			}

			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7 || _la==T__8) {
				{
				{
				State = 117;
				shop();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public MinLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterMinLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitMinLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinLevelContext minLevel() {
		MinLevelContext _localctx = new MinLevelContext(Context, State);
		EnterRule(_localctx, 20, RULE_minLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__10);
			State = 124;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrizeContext prize() {
			return GetRuleContext<PrizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversationContext conversation() {
			return GetRuleContext<ConversationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuccessContext success() {
			return GetRuleContext<SuccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FailureContext failure() {
			return GetRuleContext<FailureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinLevelContext minLevel() {
			return GetRuleContext<MinLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinDaysContext minDays() {
			return GetRuleContext<MinDaysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrsulaChoiceContext ursulaChoice() {
			return GetRuleContext<UrsulaChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValensChoiceContext valensChoice() {
			return GetRuleContext<ValensChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JournalTitleContext journalTitle() {
			return GetRuleContext<JournalTitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JournalTextContext journalText() {
			return GetRuleContext<JournalTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShopContext[] shop() {
			return GetRuleContexts<ShopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShopContext shop(int i) {
			return GetRuleContext<ShopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncounterContext encounter() {
			return GetRuleContext<EncounterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastDayContext lastDay() {
			return GetRuleContext<LastDayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelativeDayContext relativeDay() {
			return GetRuleContext<RelativeDayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnetimeContext onetime() {
			return GetRuleContext<OnetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YankContext yank() {
			return GetRuleContext<YankContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		public QuestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterQuest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitQuest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestContext quest() {
		QuestContext _localctx = new QuestContext(Context, State);
		EnterRule(_localctx, 22, RULE_quest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(T__11);
			State = 127;
			Match(STRING);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 128;
				prize();
				}
			}

			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 131;
				conversation();
				}
			}

			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 134;
				success();
				}
			}

			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 137;
				failure();
				}
			}

			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 140;
				minLevel();
				}
			}

			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 143;
				minDays();
				}
			}

			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 146;
				ursulaChoice();
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 149;
				valensChoice();
				}
			}

			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 152;
				journalTitle();
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 155;
				journalText();
				}
			}

			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7 || _la==T__8) {
				{
				{
				State = 158;
				shop();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 164;
				type();
				}
			}

			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 167;
				encounter();
				}
			}

			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 170;
				lastDay();
				}
			}

			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 173;
				relativeDay();
				}
			}

			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 176;
				onetime();
				}
			}

			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 179;
				item();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 185;
				yank();
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 188;
				location();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public PrizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterPrize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitPrize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrizeContext prize() {
		PrizeContext _localctx = new PrizeContext(Context, State);
		EnterRule(_localctx, 24, RULE_prize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__12);
			State = 192;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public SuccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_success; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterSuccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitSuccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuccessContext success() {
		SuccessContext _localctx = new SuccessContext(Context, State);
		EnterRule(_localctx, 26, RULE_success);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__13);
			State = 195;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FailureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public FailureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_failure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterFailure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitFailure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFailure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FailureContext failure() {
		FailureContext _localctx = new FailureContext(Context, State);
		EnterRule(_localctx, 28, RULE_failure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__14);
			State = 198;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(T__15);
			State = 201;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncounterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public EncounterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encounter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterEncounter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitEncounter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncounter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncounterContext encounter() {
		EncounterContext _localctx = new EncounterContext(Context, State);
		EnterRule(_localctx, 32, RULE_encounter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__16);
			State = 204;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnetimeContext : ParserRuleContext {
		public OnetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterOnetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitOnetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnetimeContext onetime() {
		OnetimeContext _localctx = new OnetimeContext(Context, State);
		EnterRule(_localctx, 34, RULE_onetime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastDayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GladiusJournalParser.INT, 0); }
		public LastDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastDay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterLastDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitLastDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastDayContext lastDay() {
		LastDayContext _localctx = new LastDayContext(Context, State);
		EnterRule(_localctx, 36, RULE_lastDay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(T__18);
			State = 209;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeDayContext : ParserRuleContext {
		public RelativeDayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeDay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterRelativeDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitRelativeDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeDayContext relativeDay() {
		RelativeDayContext _localctx = new RelativeDayContext(Context, State);
		EnterRule(_localctx, 38, RULE_relativeDay);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 40, RULE_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(T__20);
			State = 214;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YankContext : ParserRuleContext {
		public YankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yank; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterYank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitYank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYank(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YankContext yank() {
		YankContext _localctx = new YankContext(Context, State);
		EnterRule(_localctx, 42, RULE_yank);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusJournalParser.STRING, 0); }
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusJournalListener typedListener = listener as IGladiusJournalListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusJournalVisitor<TResult> typedVisitor = visitor as IGladiusJournalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(Context, State);
		EnterRule(_localctx, 44, RULE_location);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(T__22);
			State = 219;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xE0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x34', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x35', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', ';', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'>', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x41', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'G', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'J', '\n', '\x3', '\x3', 
		'\x3', '\a', '\x3', 'M', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'P', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'k', '\n', '\v', '\x3', '\v', '\x5', '\v', 'n', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', 's', '\n', '\v', '\x3', '\v', '\x5', 
		'\v', 'v', '\n', '\v', '\x3', '\v', '\a', '\v', 'y', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '|', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x84', '\n', '\r', 
		'\x3', '\r', '\x5', '\r', '\x87', '\n', '\r', '\x3', '\r', '\x5', '\r', 
		'\x8A', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x8D', '\n', '\r', '\x3', 
		'\r', '\x5', '\r', '\x90', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x93', 
		'\n', '\r', '\x3', '\r', '\x5', '\r', '\x96', '\n', '\r', '\x3', '\r', 
		'\x5', '\r', '\x99', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x9C', '\n', 
		'\r', '\x3', '\r', '\x5', '\r', '\x9F', '\n', '\r', '\x3', '\r', '\a', 
		'\r', '\xA2', '\n', '\r', '\f', '\r', '\xE', '\r', '\xA5', '\v', '\r', 
		'\x3', '\r', '\x5', '\r', '\xA8', '\n', '\r', '\x3', '\r', '\x5', '\r', 
		'\xAB', '\n', '\r', '\x3', '\r', '\x5', '\r', '\xAE', '\n', '\r', '\x3', 
		'\r', '\x5', '\r', '\xB1', '\n', '\r', '\x3', '\r', '\x5', '\r', '\xB4', 
		'\n', '\r', '\x3', '\r', '\a', '\r', '\xB7', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\xBA', '\v', '\r', '\x3', '\r', '\x5', '\r', '\xBD', '\n', '\r', 
		'\x3', '\r', '\x5', '\r', '\xC0', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x2', '\x2', 
		'\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x2', '\x3', '\x3', '\x2', '\n', '\v', '\x2', '\xEA', 
		'\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'W', '\x3', '\x2', '\x2', '\x2', '\f', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\xE', ']', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x12', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x66', '\x3', '\x2', '\x2', '\x2', '\x16', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x80', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xC7', '\x3', '\x2', '\x2', '\x2', ' ', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xCD', '\x3', '\x2', '\x2', '\x2', '$', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xD2', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '*', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xDA', '\x3', '\x2', '\x2', '\x2', '.', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x34', '\x5', '\x4', '\x3', '\x2', '\x31', '\x34', 
		'\x5', '\x14', '\v', '\x2', '\x32', '\x34', '\x5', '\x18', '\r', '\x2', 
		'\x33', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', '\x38', ':', 
		'\a', '!', '\x2', '\x2', '\x39', ';', '\x5', '\x6', '\x4', '\x2', ':', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', 
		';', '=', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x5', '\b', '\x5', '\x2', 
		'=', '<', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\x5', '\n', '\x6', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', 
		'\x5', '\f', '\a', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'G', '\x5', '\xE', '\b', '\x2', '\x46', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 
		'I', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\x5', '\x10', '\t', '\x2', 
		'I', 'H', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'N', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\x5', '\x12', '\n', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', '\x5', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '\x4', '\x2', '\x2', 'R', 'S', '\a', '!', '\x2', 
		'\x2', 'S', '\a', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x5', '\x2', 
		'\x2', 'U', 'V', '\a', '\x1C', '\x2', '\x2', 'V', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\a', '\x6', '\x2', '\x2', 'X', 'Y', '\a', '\x1C', 
		'\x2', '\x2', 'Y', '\v', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\a', 
		'\x2', '\x2', '[', '\\', '\a', '\x1C', '\x2', '\x2', '\\', '\r', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\a', '\b', '\x2', '\x2', '^', '_', '\a', 
		'\x1C', '\x2', '\x2', '_', '\xF', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\a', '\t', '\x2', '\x2', '\x61', '\x62', '\a', '\x1C', '\x2', '\x2', 
		'\x62', '\x11', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\t', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\a', '!', '\x2', '\x2', '\x65', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\f', '\x2', '\x2', 'g', 
		'h', '\a', '!', '\x2', '\x2', 'h', 'j', '\x5', '\x6', '\x4', '\x2', 'i', 
		'k', '\x5', '\x16', '\f', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\x5', '\b', '\x5', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x5', '\n', '\x6', '\x2', 'p', 'r', '\x5', '\f', '\a', '\x2', 
		'q', 's', '\x5', '\xE', '\b', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 
		't', 'v', '\x5', '\x10', '\t', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'z', '\x3', '\x2', '\x2', '\x2', 
		'w', 'y', '\x5', '\x12', '\n', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\r', '\x2', 
		'\x2', '~', '\x7F', '\a', '\x1C', '\x2', '\x2', '\x7F', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\xE', '\x2', '\x2', '\x81', 
		'\x83', '\a', '!', '\x2', '\x2', '\x82', '\x84', '\x5', '\x1A', '\xE', 
		'\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x87', '\x5', '\x6', '\x4', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x1C', '\xF', '\x2', '\x89', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8D', '\x5', 
		'\x1E', '\x10', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x90', '\x5', '\x16', '\f', '\x2', '\x8F', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x91', '\x93', '\x5', '\b', '\x5', 
		'\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x95', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x96', '\x5', '\n', '\x6', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x99', '\x5', '\f', '\a', '\x2', '\x98', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x5', 
		'\xE', '\b', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '\x10', '\t', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\x12', '\n', 
		'\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\x5', 
		' ', '\x11', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\"', '\x12', '\x2', '\xAA', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\x5', '&', '\x14', 
		'\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB1', '\x5', '(', '\x15', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB4', '\x5', '$', '\x13', '\x2', '\xB3', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', '\x5', 
		'*', '\x16', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBD', '\x5', ',', '\x17', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xC0', '\x5', '.', '\x18', '\x2', '\xBF', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\x19', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\xF', '\x2', '\x2', '\xC2', '\xC3', '\a', '!', '\x2', '\x2', '\xC3', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x10', '\x2', 
		'\x2', '\xC5', '\xC6', '\a', '!', '\x2', '\x2', '\xC6', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x11', '\x2', '\x2', '\xC8', 
		'\xC9', '\a', '!', '\x2', '\x2', '\xC9', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\a', '\x12', '\x2', '\x2', '\xCB', '\xCC', '\a', 
		'\x1C', '\x2', '\x2', '\xCC', '!', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\a', '\x13', '\x2', '\x2', '\xCE', '\xCF', '\a', '!', '\x2', 
		'\x2', '\xCF', '#', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', 
		'\x14', '\x2', '\x2', '\xD1', '%', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD3', '\a', '\x15', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x1C', '\x2', 
		'\x2', '\xD4', '\'', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 
		'\x16', '\x2', '\x2', '\xD6', ')', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\a', '\x17', '\x2', '\x2', '\xD8', '\xD9', '\a', '!', '\x2', 
		'\x2', '\xD9', '+', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'\x18', '\x2', '\x2', '\xDB', '-', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDD', '\a', '\x19', '\x2', '\x2', '\xDD', '\xDE', '\a', '!', '\x2', 
		'\x2', '\xDE', '/', '\x3', '\x2', '\x2', '\x2', '#', '\x33', '\x35', ':', 
		'=', '@', '\x43', '\x46', 'I', 'N', 'j', 'm', 'r', 'u', 'z', '\x83', '\x86', 
		'\x89', '\x8C', '\x8F', '\x92', '\x95', '\x98', '\x9B', '\x9E', '\xA3', 
		'\xA7', '\xAA', '\xAD', '\xB0', '\xB3', '\xB8', '\xBC', '\xBF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
