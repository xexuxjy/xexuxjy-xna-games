//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Prizes.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PrizesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, ID=6, WS=7, INT=8, OBR=9, CBR=10, 
		COMMA=11, STRING=12, SINGLELINE_COMMENT=13;
	public const int
		RULE_root = 0, RULE_prize = 1, RULE_prizeCash = 2, RULE_prizeExp = 3, 
		RULE_prizeItem = 4, RULE_prizeBadge = 5;
	public static readonly string[] ruleNames = {
		"root", "prize", "prizeCash", "prizeExp", "prizeItem", "prizeBadge"
	};

	private static readonly string[] _LiteralNames = {
		null, "'PRIZE'", "'PRIZECASH'", "'PRIZEEXP'", "'PRIZEITEM'", "'PRIZEBADGE'", 
		null, null, null, "'{'", "'}'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "ID", "WS", "INT", "OBR", "CBR", "COMMA", 
		"STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Prizes.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PrizesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PrizesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PrizesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrizeContext[] prize() {
			return GetRuleContexts<PrizeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeContext prize(int i) {
			return GetRuleContext<PrizeContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrizesVisitor<TResult> typedVisitor = visitor as IPrizesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12;
				prize();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PrizesParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrizeCashContext prizeCash() {
			return GetRuleContext<PrizeCashContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeExpContext prizeExp() {
			return GetRuleContext<PrizeExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeItemContext[] prizeItem() {
			return GetRuleContexts<PrizeItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeItemContext prizeItem(int i) {
			return GetRuleContext<PrizeItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeBadgeContext[] prizeBadge() {
			return GetRuleContexts<PrizeBadgeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrizeBadgeContext prizeBadge(int i) {
			return GetRuleContext<PrizeBadgeContext>(i);
		}
		public PrizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.EnterPrize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.ExitPrize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrizesVisitor<TResult> typedVisitor = visitor as IPrizesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrizeContext prize() {
		PrizeContext _localctx = new PrizeContext(Context, State);
		EnterRule(_localctx, 2, RULE_prize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			Match(T__0);
			State = 18;
			Match(STRING);
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 19;
				prizeCash();
				}
			}

			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 22;
				prizeExp();
				}
			}

			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 25;
				prizeItem();
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 31;
				prizeBadge();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeCashContext : ParserRuleContext {
		public IToken level1;
		public IToken level2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(PrizesParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(PrizesParser.INT, i);
		}
		public PrizeCashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeCash; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.EnterPrizeCash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.ExitPrizeCash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrizesVisitor<TResult> typedVisitor = visitor as IPrizesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrizeCash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrizeCashContext prizeCash() {
		PrizeCashContext _localctx = new PrizeCashContext(Context, State);
		EnterRule(_localctx, 4, RULE_prizeCash);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(T__1);
			State = 38;
			_localctx.level1 = Match(INT);
			State = 39;
			_localctx.level2 = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeExpContext : ParserRuleContext {
		public IToken level1;
		public IToken level2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(PrizesParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(PrizesParser.INT, i);
		}
		public PrizeExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.EnterPrizeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.ExitPrizeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrizesVisitor<TResult> typedVisitor = visitor as IPrizesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrizeExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrizeExpContext prizeExp() {
		PrizeExpContext _localctx = new PrizeExpContext(Context, State);
		EnterRule(_localctx, 6, RULE_prizeExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(T__2);
			State = 42;
			_localctx.level1 = Match(INT);
			State = 43;
			_localctx.level2 = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PrizesParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PrizesParser.INT, 0); }
		public PrizeItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.EnterPrizeItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.ExitPrizeItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrizesVisitor<TResult> typedVisitor = visitor as IPrizesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrizeItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrizeItemContext prizeItem() {
		PrizeItemContext _localctx = new PrizeItemContext(Context, State);
		EnterRule(_localctx, 8, RULE_prizeItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__3);
			State = 46;
			Match(STRING);
			State = 47;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrizeBadgeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PrizesParser.STRING, 0); }
		public PrizeBadgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prizeBadge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.EnterPrizeBadge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPrizesListener typedListener = listener as IPrizesListener;
			if (typedListener != null) typedListener.ExitPrizeBadge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrizesVisitor<TResult> typedVisitor = visitor as IPrizesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrizeBadge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrizeBadgeContext prizeBadge() {
		PrizeBadgeContext _localctx = new PrizeBadgeContext(Context, State);
		EnterRule(_localctx, 10, RULE_prizeBadge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(T__4);
			State = 50;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\x37', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x6', '\x2', 
		'\x10', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x11', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x17', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1A', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '\x1D', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', ' ', '\v', '\x3', '\x3', '\x3', 
		'\a', '\x3', '#', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '&', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', 
		'\x2', '\x2', '\x35', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\b', '+', '\x3', '\x2', '\x2', '\x2', '\n', '/', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE', '\x10', 
		'\x5', '\x4', '\x3', '\x2', '\xF', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x12', '\x3', '\x2', '\x2', '\x2', '\x12', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\a', '\x3', '\x2', '\x2', 
		'\x14', '\x16', '\a', '\xE', '\x2', '\x2', '\x15', '\x17', '\x5', '\x6', 
		'\x4', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x1A', '\x5', '\b', '\x5', '\x2', '\x19', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\n', '\x6', '\x2', 
		'\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '$', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '!', '#', '\x5', '\f', '\a', '\x2', 
		'\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '&', '\x3', '\x2', '\x2', 
		'\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', 
		'\x2', '\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\a', '\x4', '\x2', '\x2', '(', ')', '\a', 
		'\n', '\x2', '\x2', ')', '*', '\a', '\n', '\x2', '\x2', '*', '\a', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\a', '\x5', '\x2', '\x2', ',', '-', '\a', 
		'\n', '\x2', '\x2', '-', '.', '\a', '\n', '\x2', '\x2', '.', '\t', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\a', '\x6', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\xE', '\x2', '\x2', '\x31', '\x32', '\a', '\n', '\x2', '\x2', '\x32', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\a', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\xE', '\x2', '\x2', '\x35', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\a', '\x11', '\x16', '\x19', '\x1E', '$',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
