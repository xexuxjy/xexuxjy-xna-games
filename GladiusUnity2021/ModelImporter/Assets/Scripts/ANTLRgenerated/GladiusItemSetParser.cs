//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GladiusItemSet.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GladiusItemSetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, WS=5, INT=6, FLOAT=7, COMMA=8, UNDERSCORE=9, 
		DASH=10, ITEMNAME=11, STRING=12, SINGLELINE_COMMENT=13;
	public const int
		RULE_root = 0, RULE_itemSetClassLine = 1, RULE_modItemsComp = 2;
	public static readonly string[] ruleNames = {
		"root", "itemSetClassLine", "modItemsComp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ITEMSET export Class:'", "'Region:'", "'Affinity:'", "'MODITEMSCOMP:'", 
		null, null, null, "','", "'_'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "WS", "INT", "FLOAT", "COMMA", "UNDERSCORE", 
		"DASH", "ITEMNAME", "STRING", "SINGLELINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GladiusItemSet.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GladiusItemSetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GladiusItemSetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GladiusItemSetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemSetClassLineContext[] itemSetClassLine() {
			return GetRuleContexts<ItemSetClassLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemSetClassLineContext itemSetClassLine(int i) {
			return GetRuleContext<ItemSetClassLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModItemsCompContext[] modItemsComp() {
			return GetRuleContexts<ModItemsCompContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModItemsCompContext modItemsComp(int i) {
			return GetRuleContext<ModItemsCompContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemSetListener typedListener = listener as IGladiusItemSetListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemSetListener typedListener = listener as IGladiusItemSetListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemSetVisitor<TResult> typedVisitor = visitor as IGladiusItemSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 8;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 6;
					itemSetClassLine();
					}
					break;
				case T__3:
					{
					State = 7;
					modItemsComp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 10;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__3 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemSetClassLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GladiusItemSetParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GladiusItemSetParser.STRING, i);
		}
		public ItemSetClassLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemSetClassLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemSetListener typedListener = listener as IGladiusItemSetListener;
			if (typedListener != null) typedListener.EnterItemSetClassLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemSetListener typedListener = listener as IGladiusItemSetListener;
			if (typedListener != null) typedListener.ExitItemSetClassLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemSetVisitor<TResult> typedVisitor = visitor as IGladiusItemSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemSetClassLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemSetClassLineContext itemSetClassLine() {
		ItemSetClassLineContext _localctx = new ItemSetClassLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_itemSetClassLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			Match(T__0);
			State = 13;
			Match(STRING);
			State = 14;
			Match(STRING);
			State = 15;
			Match(T__1);
			State = 16;
			Match(STRING);
			State = 17;
			Match(T__2);
			State = 18;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModItemsCompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GladiusItemSetParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GladiusItemSetParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GladiusItemSetParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(GladiusItemSetParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(GladiusItemSetParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ITEMNAME() { return GetTokens(GladiusItemSetParser.ITEMNAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEMNAME(int i) {
			return GetToken(GladiusItemSetParser.ITEMNAME, i);
		}
		public ModItemsCompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modItemsComp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGladiusItemSetListener typedListener = listener as IGladiusItemSetListener;
			if (typedListener != null) typedListener.EnterModItemsComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGladiusItemSetListener typedListener = listener as IGladiusItemSetListener;
			if (typedListener != null) typedListener.ExitModItemsComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGladiusItemSetVisitor<TResult> typedVisitor = visitor as IGladiusItemSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModItemsComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModItemsCompContext modItemsComp() {
		ModItemsCompContext _localctx = new ModItemsCompContext(Context, State);
		EnterRule(_localctx, 4, RULE_modItemsComp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			Match(T__3);
			State = 21;
			Match(STRING);
			State = 22;
			Match(COMMA);
			State = 23;
			Match(INT);
			State = 24;
			Match(COMMA);
			State = 25;
			Match(INT);
			State = 26;
			Match(COMMA);
			State = 27;
			Match(ITEMNAME);
			State = 28;
			Match(COMMA);
			State = 29;
			Match(ITEMNAME);
			State = 30;
			Match(COMMA);
			State = 31;
			Match(ITEMNAME);
			State = 32;
			Match(COMMA);
			State = 33;
			Match(ITEMNAME);
			State = 34;
			Match(COMMA);
			State = 35;
			Match(ITEMNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '(', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x6', 
		'\x2', '\v', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\f', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', '\x2', '\x2', '&', '\x2', 
		'\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x16', '\x3', '\x2', '\x2', '\x2', '\b', '\v', '\x5', '\x4', '\x3', 
		'\x2', '\t', '\v', '\x5', '\x6', '\x4', '\x2', '\n', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\t', '\x3', '\x2', '\x2', '\x2', '\v', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\n', '\x3', '\x2', '\x2', '\x2', '\f', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x3', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xF', '\a', '\x3', '\x2', '\x2', '\xF', '\x10', '\a', '\xE', '\x2', '\x2', 
		'\x10', '\x11', '\a', '\xE', '\x2', '\x2', '\x11', '\x12', '\a', '\x4', 
		'\x2', '\x2', '\x12', '\x13', '\a', '\xE', '\x2', '\x2', '\x13', '\x14', 
		'\a', '\x5', '\x2', '\x2', '\x14', '\x15', '\a', '\xE', '\x2', '\x2', 
		'\x15', '\x5', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\x6', 
		'\x2', '\x2', '\x17', '\x18', '\a', '\xE', '\x2', '\x2', '\x18', '\x19', 
		'\a', '\n', '\x2', '\x2', '\x19', '\x1A', '\a', '\b', '\x2', '\x2', '\x1A', 
		'\x1B', '\a', '\n', '\x2', '\x2', '\x1B', '\x1C', '\a', '\b', '\x2', '\x2', 
		'\x1C', '\x1D', '\a', '\n', '\x2', '\x2', '\x1D', '\x1E', '\a', '\r', 
		'\x2', '\x2', '\x1E', '\x1F', '\a', '\n', '\x2', '\x2', '\x1F', ' ', '\a', 
		'\r', '\x2', '\x2', ' ', '!', '\a', '\n', '\x2', '\x2', '!', '\"', '\a', 
		'\r', '\x2', '\x2', '\"', '#', '\a', '\n', '\x2', '\x2', '#', '$', '\a', 
		'\r', '\x2', '\x2', '$', '%', '\a', '\n', '\x2', '\x2', '%', '&', '\a', 
		'\r', '\x2', '\x2', '&', '\a', '\x3', '\x2', '\x2', '\x2', '\x4', '\n', 
		'\f',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
